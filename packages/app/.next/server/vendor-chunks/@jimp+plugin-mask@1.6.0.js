"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@jimp+plugin-mask@1.6.0";
exports.ids = ["vendor-chunks/@jimp+plugin-mask@1.6.0"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@jimp+plugin-mask@1.6.0/node_modules/@jimp/plugin-mask/dist/commonjs/index.js":
/*!**************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@jimp+plugin-mask@1.6.0/node_modules/@jimp/plugin-mask/dist/commonjs/index.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.methods = void 0;\nconst types_1 = __webpack_require__(/*! @jimp/types */ \"(ssr)/../../node_modules/.pnpm/@jimp+types@1.6.0/node_modules/@jimp/types/dist/commonjs/index.js\");\nconst zod_1 = __webpack_require__(/*! zod */ \"(ssr)/../../node_modules/.pnpm/zod@3.24.1/node_modules/zod/lib/index.js\");\nconst MaskOptionsObjectSchema = zod_1.z.object({\n    src: types_1.JimpClassSchema,\n    /** the x position to draw the image */\n    x: zod_1.z.number().optional(),\n    /** the y position to draw the image */\n    y: zod_1.z.number().optional(),\n});\nconst MaskOptionsSchema = zod_1.z.union([types_1.JimpClassSchema, MaskOptionsObjectSchema]);\nexports.methods = {\n    /**\n     * Masks a source image on to this image using average pixel colour. A completely black pixel on the mask will turn a pixel in the image completely transparent.\n     * @param src the source Jimp instance\n     * @param x the horizontal position to blit the image\n     * @param y the vertical position to blit the image\n     * @example\n     * ```ts\n     * import { Jimp } from \"jimp\";\n     *\n     * const image = await Jimp.read(\"test/image.png\");\n     * const mask = await Jimp.read(\"test/mask.png\");\n     *\n     * image.mask(mask);\n     * ```\n     */\n    mask(image, options) {\n        MaskOptionsSchema.parse(options);\n        let src;\n        let x;\n        let y;\n        if (\"bitmap\" in options) {\n            src = options;\n            x = 0;\n            y = 0;\n        }\n        else {\n            src = options.src;\n            x = options.x ?? 0;\n            y = options.y ?? 0;\n        }\n        // round input\n        x = Math.round(x);\n        y = Math.round(y);\n        const w = image.bitmap.width;\n        const h = image.bitmap.height;\n        src.scan(function (sx, sy, idx) {\n            const destX = x + sx;\n            const destY = y + sy;\n            if (destX >= 0 && destY >= 0 && destX < w && destY < h) {\n                const dstIdx = image.getPixelIndex(destX, destY);\n                const { data } = src.bitmap;\n                const avg = (data[idx + 0] + data[idx + 1] + data[idx + 2]) / 3;\n                image.bitmap.data[dstIdx + 3] *= avg / 255;\n            }\n        });\n        return image;\n    },\n};\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BqaW1wK3BsdWdpbi1tYXNrQDEuNi4wL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tbWFzay9kaXN0L2NvbW1vbmpzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWU7QUFDZixnQkFBZ0IsbUJBQU8sQ0FBQyxxSEFBYTtBQUNyQyxjQUFjLG1CQUFPLENBQUMsb0ZBQUs7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixPQUFPO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbWlrZXdlc3RoYWQvRGVza3RvcC9SZXBvcy9zcG9yYWRpYy1sYWJzLXRpbGUtZXh0cnVkZXIvbm9kZV9tb2R1bGVzLy5wbnBtL0BqaW1wK3BsdWdpbi1tYXNrQDEuNi4wL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tbWFzay9kaXN0L2NvbW1vbmpzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tZXRob2RzID0gdm9pZCAwO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCJAamltcC90eXBlc1wiKTtcbmNvbnN0IHpvZF8xID0gcmVxdWlyZShcInpvZFwiKTtcbmNvbnN0IE1hc2tPcHRpb25zT2JqZWN0U2NoZW1hID0gem9kXzEuei5vYmplY3Qoe1xuICAgIHNyYzogdHlwZXNfMS5KaW1wQ2xhc3NTY2hlbWEsXG4gICAgLyoqIHRoZSB4IHBvc2l0aW9uIHRvIGRyYXcgdGhlIGltYWdlICovXG4gICAgeDogem9kXzEuei5udW1iZXIoKS5vcHRpb25hbCgpLFxuICAgIC8qKiB0aGUgeSBwb3NpdGlvbiB0byBkcmF3IHRoZSBpbWFnZSAqL1xuICAgIHk6IHpvZF8xLnoubnVtYmVyKCkub3B0aW9uYWwoKSxcbn0pO1xuY29uc3QgTWFza09wdGlvbnNTY2hlbWEgPSB6b2RfMS56LnVuaW9uKFt0eXBlc18xLkppbXBDbGFzc1NjaGVtYSwgTWFza09wdGlvbnNPYmplY3RTY2hlbWFdKTtcbmV4cG9ydHMubWV0aG9kcyA9IHtcbiAgICAvKipcbiAgICAgKiBNYXNrcyBhIHNvdXJjZSBpbWFnZSBvbiB0byB0aGlzIGltYWdlIHVzaW5nIGF2ZXJhZ2UgcGl4ZWwgY29sb3VyLiBBIGNvbXBsZXRlbHkgYmxhY2sgcGl4ZWwgb24gdGhlIG1hc2sgd2lsbCB0dXJuIGEgcGl4ZWwgaW4gdGhlIGltYWdlIGNvbXBsZXRlbHkgdHJhbnNwYXJlbnQuXG4gICAgICogQHBhcmFtIHNyYyB0aGUgc291cmNlIEppbXAgaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0geCB0aGUgaG9yaXpvbnRhbCBwb3NpdGlvbiB0byBibGl0IHRoZSBpbWFnZVxuICAgICAqIEBwYXJhbSB5IHRoZSB2ZXJ0aWNhbCBwb3NpdGlvbiB0byBibGl0IHRoZSBpbWFnZVxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiBpbXBvcnQgeyBKaW1wIH0gZnJvbSBcImppbXBcIjtcbiAgICAgKlxuICAgICAqIGNvbnN0IGltYWdlID0gYXdhaXQgSmltcC5yZWFkKFwidGVzdC9pbWFnZS5wbmdcIik7XG4gICAgICogY29uc3QgbWFzayA9IGF3YWl0IEppbXAucmVhZChcInRlc3QvbWFzay5wbmdcIik7XG4gICAgICpcbiAgICAgKiBpbWFnZS5tYXNrKG1hc2spO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIG1hc2soaW1hZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgTWFza09wdGlvbnNTY2hlbWEucGFyc2Uob3B0aW9ucyk7XG4gICAgICAgIGxldCBzcmM7XG4gICAgICAgIGxldCB4O1xuICAgICAgICBsZXQgeTtcbiAgICAgICAgaWYgKFwiYml0bWFwXCIgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgc3JjID0gb3B0aW9ucztcbiAgICAgICAgICAgIHggPSAwO1xuICAgICAgICAgICAgeSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzcmMgPSBvcHRpb25zLnNyYztcbiAgICAgICAgICAgIHggPSBvcHRpb25zLnggPz8gMDtcbiAgICAgICAgICAgIHkgPSBvcHRpb25zLnkgPz8gMDtcbiAgICAgICAgfVxuICAgICAgICAvLyByb3VuZCBpbnB1dFxuICAgICAgICB4ID0gTWF0aC5yb3VuZCh4KTtcbiAgICAgICAgeSA9IE1hdGgucm91bmQoeSk7XG4gICAgICAgIGNvbnN0IHcgPSBpbWFnZS5iaXRtYXAud2lkdGg7XG4gICAgICAgIGNvbnN0IGggPSBpbWFnZS5iaXRtYXAuaGVpZ2h0O1xuICAgICAgICBzcmMuc2NhbihmdW5jdGlvbiAoc3gsIHN5LCBpZHgpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlc3RYID0geCArIHN4O1xuICAgICAgICAgICAgY29uc3QgZGVzdFkgPSB5ICsgc3k7XG4gICAgICAgICAgICBpZiAoZGVzdFggPj0gMCAmJiBkZXN0WSA+PSAwICYmIGRlc3RYIDwgdyAmJiBkZXN0WSA8IGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkc3RJZHggPSBpbWFnZS5nZXRQaXhlbEluZGV4KGRlc3RYLCBkZXN0WSk7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBzcmMuYml0bWFwO1xuICAgICAgICAgICAgICAgIGNvbnN0IGF2ZyA9IChkYXRhW2lkeCArIDBdICsgZGF0YVtpZHggKyAxXSArIGRhdGFbaWR4ICsgMl0pIC8gMztcbiAgICAgICAgICAgICAgICBpbWFnZS5iaXRtYXAuZGF0YVtkc3RJZHggKyAzXSAqPSBhdmcgLyAyNTU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gaW1hZ2U7XG4gICAgfSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@jimp+plugin-mask@1.6.0/node_modules/@jimp/plugin-mask/dist/commonjs/index.js\n");

/***/ })

};
;