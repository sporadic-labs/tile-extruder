"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@jimp+plugin-blit@1.6.0";
exports.ids = ["vendor-chunks/@jimp+plugin-blit@1.6.0"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@jimp+plugin-blit@1.6.0/node_modules/@jimp/plugin-blit/dist/commonjs/index.js":
/*!**************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@jimp+plugin-blit@1.6.0/node_modules/@jimp/plugin-blit/dist/commonjs/index.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.methods = void 0;\nconst types_1 = __webpack_require__(/*! @jimp/types */ \"(ssr)/../../node_modules/.pnpm/@jimp+types@1.6.0/node_modules/@jimp/types/dist/commonjs/index.js\");\nconst utils_1 = __webpack_require__(/*! @jimp/utils */ \"(ssr)/../../node_modules/.pnpm/@jimp+utils@1.6.0/node_modules/@jimp/utils/dist/commonjs/index.js\");\nconst zod_1 = __webpack_require__(/*! zod */ \"(ssr)/../../node_modules/.pnpm/zod@3.24.1/node_modules/zod/lib/index.js\");\nconst BlitOptionsSchemaComplex = zod_1.z.object({\n    src: types_1.JimpClassSchema,\n    /** the x position to blit the image */\n    x: zod_1.z.number().optional(),\n    /** the y position to blit the image */\n    y: zod_1.z.number().optional(),\n    /** the x position from which to crop the source image */\n    srcX: zod_1.z.number().optional(),\n    /** the y position from which to crop the source image */\n    srcY: zod_1.z.number().optional(),\n    /** the width to which to crop the source image */\n    srcW: zod_1.z.number().optional(),\n    /** the height to which to crop the source image */\n    srcH: zod_1.z.number().optional(),\n});\nconst BlitOptionsSchema = zod_1.z.union([types_1.JimpClassSchema, BlitOptionsSchemaComplex]);\nexports.methods = {\n    /**\n     * Short for \"bit-block transfer\".\n     * It involves the transfer of a block of pixel data from one area of a computer's memory to another area, typically for the purpose of rendering images on the screen or manipulating them in various ways.\n     * It's a fundamental operation in computer graphics utilized in various applications, from operating systems to video games.\n     *\n     * @example\n     * ```ts\n     * import { Jimp } from \"jimp\";\n     *\n     * const image = await Jimp.read(\"test/image.png\");\n     * const parrot = await Jimp.read(\"test/party-parrot.png\");\n     *\n     * image.blit({ src: parrot, x: 10, y: 10 });\n     * ```\n     */\n    blit(image, options) {\n        const parsed = BlitOptionsSchema.parse(options);\n        let { \n        // eslint-disable-next-line prefer-const\n        src, x = 0, y = 0, srcX = 0, srcY = 0, srcW = src.bitmap.width, srcH = src.bitmap.height, } = \"bitmap\" in parsed ? { src: parsed } : parsed;\n        if (!(\"bitmap\" in src)) {\n            throw new Error(\"The source must be a Jimp image\");\n        }\n        if (typeof x !== \"number\" || typeof y !== \"number\") {\n            throw new Error(\"x and y must be numbers\");\n        }\n        // round input\n        x = Math.round(x);\n        y = Math.round(y);\n        // round input\n        srcX = Math.round(srcX);\n        srcY = Math.round(srcY);\n        srcW = Math.round(srcW);\n        srcH = Math.round(srcH);\n        const maxWidth = image.bitmap.width;\n        const maxHeight = image.bitmap.height;\n        (0, utils_1.scan)(src, srcX, srcY, srcW, srcH, function (sx, sy, idx) {\n            const xOffset = x + sx - srcX;\n            const yOffset = y + sy - srcY;\n            if (xOffset >= 0 &&\n                yOffset >= 0 &&\n                maxWidth - xOffset > 0 &&\n                maxHeight - yOffset > 0) {\n                const dstIdx = image.getPixelIndex(xOffset, yOffset);\n                const srcColor = {\n                    r: src.bitmap.data[idx] || 0,\n                    g: src.bitmap.data[idx + 1] || 0,\n                    b: src.bitmap.data[idx + 2] || 0,\n                    a: src.bitmap.data[idx + 3] || 0,\n                };\n                const dst = {\n                    r: image.bitmap.data[dstIdx] || 0,\n                    g: image.bitmap.data[dstIdx + 1] || 0,\n                    b: image.bitmap.data[dstIdx + 2] || 0,\n                    a: image.bitmap.data[dstIdx + 3] || 0,\n                };\n                image.bitmap.data[dstIdx] =\n                    ((srcColor.a * (srcColor.r - dst.r) - dst.r + 255) >> 8) + dst.r;\n                image.bitmap.data[dstIdx + 1] =\n                    ((srcColor.a * (srcColor.g - dst.g) - dst.g + 255) >> 8) + dst.g;\n                image.bitmap.data[dstIdx + 2] =\n                    ((srcColor.a * (srcColor.b - dst.b) - dst.b + 255) >> 8) + dst.b;\n                image.bitmap.data[dstIdx + 3] = (0, utils_1.limit255)(dst.a + srcColor.a);\n            }\n        });\n        return image;\n    },\n};\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BqaW1wK3BsdWdpbi1ibGl0QDEuNi4wL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tYmxpdC9kaXN0L2NvbW1vbmpzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWU7QUFDZixnQkFBZ0IsbUJBQU8sQ0FBQyxxSEFBYTtBQUNyQyxnQkFBZ0IsbUJBQU8sQ0FBQyxxSEFBYTtBQUNyQyxjQUFjLG1CQUFPLENBQUMsb0ZBQUs7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDJCQUEyQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvR0FBb0cseUJBQXlCLGNBQWM7QUFDM0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbWlrZXdlc3RoYWQvRGVza3RvcC9SZXBvcy9zcG9yYWRpYy1sYWJzLXRpbGUtZXh0cnVkZXIvbm9kZV9tb2R1bGVzLy5wbnBtL0BqaW1wK3BsdWdpbi1ibGl0QDEuNi4wL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tYmxpdC9kaXN0L2NvbW1vbmpzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tZXRob2RzID0gdm9pZCAwO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCJAamltcC90eXBlc1wiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiQGppbXAvdXRpbHNcIik7XG5jb25zdCB6b2RfMSA9IHJlcXVpcmUoXCJ6b2RcIik7XG5jb25zdCBCbGl0T3B0aW9uc1NjaGVtYUNvbXBsZXggPSB6b2RfMS56Lm9iamVjdCh7XG4gICAgc3JjOiB0eXBlc18xLkppbXBDbGFzc1NjaGVtYSxcbiAgICAvKiogdGhlIHggcG9zaXRpb24gdG8gYmxpdCB0aGUgaW1hZ2UgKi9cbiAgICB4OiB6b2RfMS56Lm51bWJlcigpLm9wdGlvbmFsKCksXG4gICAgLyoqIHRoZSB5IHBvc2l0aW9uIHRvIGJsaXQgdGhlIGltYWdlICovXG4gICAgeTogem9kXzEuei5udW1iZXIoKS5vcHRpb25hbCgpLFxuICAgIC8qKiB0aGUgeCBwb3NpdGlvbiBmcm9tIHdoaWNoIHRvIGNyb3AgdGhlIHNvdXJjZSBpbWFnZSAqL1xuICAgIHNyY1g6IHpvZF8xLnoubnVtYmVyKCkub3B0aW9uYWwoKSxcbiAgICAvKiogdGhlIHkgcG9zaXRpb24gZnJvbSB3aGljaCB0byBjcm9wIHRoZSBzb3VyY2UgaW1hZ2UgKi9cbiAgICBzcmNZOiB6b2RfMS56Lm51bWJlcigpLm9wdGlvbmFsKCksXG4gICAgLyoqIHRoZSB3aWR0aCB0byB3aGljaCB0byBjcm9wIHRoZSBzb3VyY2UgaW1hZ2UgKi9cbiAgICBzcmNXOiB6b2RfMS56Lm51bWJlcigpLm9wdGlvbmFsKCksXG4gICAgLyoqIHRoZSBoZWlnaHQgdG8gd2hpY2ggdG8gY3JvcCB0aGUgc291cmNlIGltYWdlICovXG4gICAgc3JjSDogem9kXzEuei5udW1iZXIoKS5vcHRpb25hbCgpLFxufSk7XG5jb25zdCBCbGl0T3B0aW9uc1NjaGVtYSA9IHpvZF8xLnoudW5pb24oW3R5cGVzXzEuSmltcENsYXNzU2NoZW1hLCBCbGl0T3B0aW9uc1NjaGVtYUNvbXBsZXhdKTtcbmV4cG9ydHMubWV0aG9kcyA9IHtcbiAgICAvKipcbiAgICAgKiBTaG9ydCBmb3IgXCJiaXQtYmxvY2sgdHJhbnNmZXJcIi5cbiAgICAgKiBJdCBpbnZvbHZlcyB0aGUgdHJhbnNmZXIgb2YgYSBibG9jayBvZiBwaXhlbCBkYXRhIGZyb20gb25lIGFyZWEgb2YgYSBjb21wdXRlcidzIG1lbW9yeSB0byBhbm90aGVyIGFyZWEsIHR5cGljYWxseSBmb3IgdGhlIHB1cnBvc2Ugb2YgcmVuZGVyaW5nIGltYWdlcyBvbiB0aGUgc2NyZWVuIG9yIG1hbmlwdWxhdGluZyB0aGVtIGluIHZhcmlvdXMgd2F5cy5cbiAgICAgKiBJdCdzIGEgZnVuZGFtZW50YWwgb3BlcmF0aW9uIGluIGNvbXB1dGVyIGdyYXBoaWNzIHV0aWxpemVkIGluIHZhcmlvdXMgYXBwbGljYXRpb25zLCBmcm9tIG9wZXJhdGluZyBzeXN0ZW1zIHRvIHZpZGVvIGdhbWVzLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0c1xuICAgICAqIGltcG9ydCB7IEppbXAgfSBmcm9tIFwiamltcFwiO1xuICAgICAqXG4gICAgICogY29uc3QgaW1hZ2UgPSBhd2FpdCBKaW1wLnJlYWQoXCJ0ZXN0L2ltYWdlLnBuZ1wiKTtcbiAgICAgKiBjb25zdCBwYXJyb3QgPSBhd2FpdCBKaW1wLnJlYWQoXCJ0ZXN0L3BhcnR5LXBhcnJvdC5wbmdcIik7XG4gICAgICpcbiAgICAgKiBpbWFnZS5ibGl0KHsgc3JjOiBwYXJyb3QsIHg6IDEwLCB5OiAxMCB9KTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBibGl0KGltYWdlLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IEJsaXRPcHRpb25zU2NoZW1hLnBhcnNlKG9wdGlvbnMpO1xuICAgICAgICBsZXQgeyBcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1jb25zdFxuICAgICAgICBzcmMsIHggPSAwLCB5ID0gMCwgc3JjWCA9IDAsIHNyY1kgPSAwLCBzcmNXID0gc3JjLmJpdG1hcC53aWR0aCwgc3JjSCA9IHNyYy5iaXRtYXAuaGVpZ2h0LCB9ID0gXCJiaXRtYXBcIiBpbiBwYXJzZWQgPyB7IHNyYzogcGFyc2VkIH0gOiBwYXJzZWQ7XG4gICAgICAgIGlmICghKFwiYml0bWFwXCIgaW4gc3JjKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHNvdXJjZSBtdXN0IGJlIGEgSmltcCBpbWFnZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHggIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIHkgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInggYW5kIHkgbXVzdCBiZSBudW1iZXJzXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJvdW5kIGlucHV0XG4gICAgICAgIHggPSBNYXRoLnJvdW5kKHgpO1xuICAgICAgICB5ID0gTWF0aC5yb3VuZCh5KTtcbiAgICAgICAgLy8gcm91bmQgaW5wdXRcbiAgICAgICAgc3JjWCA9IE1hdGgucm91bmQoc3JjWCk7XG4gICAgICAgIHNyY1kgPSBNYXRoLnJvdW5kKHNyY1kpO1xuICAgICAgICBzcmNXID0gTWF0aC5yb3VuZChzcmNXKTtcbiAgICAgICAgc3JjSCA9IE1hdGgucm91bmQoc3JjSCk7XG4gICAgICAgIGNvbnN0IG1heFdpZHRoID0gaW1hZ2UuYml0bWFwLndpZHRoO1xuICAgICAgICBjb25zdCBtYXhIZWlnaHQgPSBpbWFnZS5iaXRtYXAuaGVpZ2h0O1xuICAgICAgICAoMCwgdXRpbHNfMS5zY2FuKShzcmMsIHNyY1gsIHNyY1ksIHNyY1csIHNyY0gsIGZ1bmN0aW9uIChzeCwgc3ksIGlkeCkge1xuICAgICAgICAgICAgY29uc3QgeE9mZnNldCA9IHggKyBzeCAtIHNyY1g7XG4gICAgICAgICAgICBjb25zdCB5T2Zmc2V0ID0geSArIHN5IC0gc3JjWTtcbiAgICAgICAgICAgIGlmICh4T2Zmc2V0ID49IDAgJiZcbiAgICAgICAgICAgICAgICB5T2Zmc2V0ID49IDAgJiZcbiAgICAgICAgICAgICAgICBtYXhXaWR0aCAtIHhPZmZzZXQgPiAwICYmXG4gICAgICAgICAgICAgICAgbWF4SGVpZ2h0IC0geU9mZnNldCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkc3RJZHggPSBpbWFnZS5nZXRQaXhlbEluZGV4KHhPZmZzZXQsIHlPZmZzZXQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNyY0NvbG9yID0ge1xuICAgICAgICAgICAgICAgICAgICByOiBzcmMuYml0bWFwLmRhdGFbaWR4XSB8fCAwLFxuICAgICAgICAgICAgICAgICAgICBnOiBzcmMuYml0bWFwLmRhdGFbaWR4ICsgMV0gfHwgMCxcbiAgICAgICAgICAgICAgICAgICAgYjogc3JjLmJpdG1hcC5kYXRhW2lkeCArIDJdIHx8IDAsXG4gICAgICAgICAgICAgICAgICAgIGE6IHNyYy5iaXRtYXAuZGF0YVtpZHggKyAzXSB8fCAwLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgZHN0ID0ge1xuICAgICAgICAgICAgICAgICAgICByOiBpbWFnZS5iaXRtYXAuZGF0YVtkc3RJZHhdIHx8IDAsXG4gICAgICAgICAgICAgICAgICAgIGc6IGltYWdlLmJpdG1hcC5kYXRhW2RzdElkeCArIDFdIHx8IDAsXG4gICAgICAgICAgICAgICAgICAgIGI6IGltYWdlLmJpdG1hcC5kYXRhW2RzdElkeCArIDJdIHx8IDAsXG4gICAgICAgICAgICAgICAgICAgIGE6IGltYWdlLmJpdG1hcC5kYXRhW2RzdElkeCArIDNdIHx8IDAsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpbWFnZS5iaXRtYXAuZGF0YVtkc3RJZHhdID1cbiAgICAgICAgICAgICAgICAgICAgKChzcmNDb2xvci5hICogKHNyY0NvbG9yLnIgLSBkc3QucikgLSBkc3QuciArIDI1NSkgPj4gOCkgKyBkc3QucjtcbiAgICAgICAgICAgICAgICBpbWFnZS5iaXRtYXAuZGF0YVtkc3RJZHggKyAxXSA9XG4gICAgICAgICAgICAgICAgICAgICgoc3JjQ29sb3IuYSAqIChzcmNDb2xvci5nIC0gZHN0LmcpIC0gZHN0LmcgKyAyNTUpID4+IDgpICsgZHN0Lmc7XG4gICAgICAgICAgICAgICAgaW1hZ2UuYml0bWFwLmRhdGFbZHN0SWR4ICsgMl0gPVxuICAgICAgICAgICAgICAgICAgICAoKHNyY0NvbG9yLmEgKiAoc3JjQ29sb3IuYiAtIGRzdC5iKSAtIGRzdC5iICsgMjU1KSA+PiA4KSArIGRzdC5iO1xuICAgICAgICAgICAgICAgIGltYWdlLmJpdG1hcC5kYXRhW2RzdElkeCArIDNdID0gKDAsIHV0aWxzXzEubGltaXQyNTUpKGRzdC5hICsgc3JjQ29sb3IuYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gaW1hZ2U7XG4gICAgfSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@jimp+plugin-blit@1.6.0/node_modules/@jimp/plugin-blit/dist/commonjs/index.js\n");

/***/ })

};
;