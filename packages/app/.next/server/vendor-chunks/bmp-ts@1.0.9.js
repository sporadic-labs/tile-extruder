"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/bmp-ts@1.0.9";
exports.ids = ["vendor-chunks/bmp-ts@1.0.9"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/bmp-ts@1.0.9/node_modules/bmp-ts/dist/commonjs/decoder.js":
/*!******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/bmp-ts@1.0.9/node_modules/bmp-ts/dist/commonjs/decoder.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst header_types_js_1 = __importDefault(__webpack_require__(/*! ./header-types.js */ \"(ssr)/../../node_modules/.pnpm/bmp-ts@1.0.9/node_modules/bmp-ts/dist/commonjs/header-types.js\"));\nconst mask_color_js_1 = __importDefault(__webpack_require__(/*! ./mask-color.js */ \"(ssr)/../../node_modules/.pnpm/bmp-ts@1.0.9/node_modules/bmp-ts/dist/commonjs/mask-color.js\"));\nconst types_js_1 = __webpack_require__(/*! ./types.js */ \"(ssr)/../../node_modules/.pnpm/bmp-ts@1.0.9/node_modules/bmp-ts/dist/commonjs/types.js\");\nclass BmpDecoder {\n    // Header\n    flag;\n    fileSize;\n    reserved1;\n    reserved2;\n    offset;\n    headerSize;\n    width;\n    height;\n    planes;\n    bitPP;\n    compression;\n    rawSize;\n    hr;\n    vr;\n    colors;\n    importantColors;\n    palette;\n    data;\n    maskRed;\n    maskGreen;\n    maskBlue;\n    maskAlpha;\n    toRGBA;\n    pos;\n    bottomUp;\n    buffer;\n    locRed;\n    locGreen;\n    locBlue;\n    locAlpha;\n    shiftRed;\n    shiftGreen;\n    shiftBlue;\n    shiftAlpha;\n    constructor(buffer, { toRGBA } = { toRGBA: false }) {\n        this.buffer = buffer;\n        this.toRGBA = !!toRGBA;\n        this.pos = 0;\n        this.bottomUp = true;\n        this.flag = this.buffer.toString('utf-8', 0, (this.pos += 2));\n        if (this.flag !== 'BM') {\n            throw new Error('Invalid BMP File');\n        }\n        this.locRed = this.toRGBA ? 0 : 3;\n        this.locGreen = this.toRGBA ? 1 : 2;\n        this.locBlue = this.toRGBA ? 2 : 1;\n        this.locAlpha = this.toRGBA ? 3 : 0;\n        this.parseHeader();\n        this.parseRGBA();\n    }\n    parseHeader() {\n        this.fileSize = this.readUInt32LE();\n        this.reserved1 = this.buffer.readUInt16LE(this.pos);\n        this.pos += 2;\n        this.reserved2 = this.buffer.readUInt16LE(this.pos);\n        this.pos += 2;\n        this.offset = this.readUInt32LE();\n        // End of BITMAP_FILE_HEADER\n        this.headerSize = this.readUInt32LE();\n        if (!(this.headerSize in header_types_js_1.default)) {\n            throw new Error(`Unsupported BMP header size ${this.headerSize}`);\n        }\n        this.width = this.readUInt32LE();\n        this.height = this.readUInt32LE();\n        // negative value are possible here => implies bottom down\n        this.height =\n            this.height > 0x7fffffff ? this.height - 0x100000000 : this.height;\n        this.planes = this.buffer.readUInt16LE(this.pos);\n        this.pos += 2;\n        this.bitPP = this.buffer.readUInt16LE(this.pos);\n        this.pos += 2;\n        this.compression = this.readUInt32LE();\n        this.rawSize = this.readUInt32LE();\n        this.hr = this.readUInt32LE();\n        this.vr = this.readUInt32LE();\n        this.colors = this.readUInt32LE();\n        this.importantColors = this.readUInt32LE();\n        // De facto defaults\n        if (this.bitPP === 32) {\n            this.maskAlpha = 0;\n            this.maskRed = 0x00ff0000;\n            this.maskGreen = 0x0000ff00;\n            this.maskBlue = 0x000000ff;\n        }\n        else if (this.bitPP === 16) {\n            this.maskAlpha = 0;\n            this.maskRed = 0x7c00;\n            this.maskGreen = 0x03e0;\n            this.maskBlue = 0x001f;\n        }\n        // End of BITMAP_INFO_HEADER\n        if (this.headerSize > header_types_js_1.default.BITMAP_INFO_HEADER ||\n            this.compression === types_js_1.BmpCompression.BI_BIT_FIELDS ||\n            this.compression === types_js_1.BmpCompression.BI_ALPHA_BIT_FIELDS) {\n            this.maskRed = this.readUInt32LE();\n            this.maskGreen = this.readUInt32LE();\n            this.maskBlue = this.readUInt32LE();\n        }\n        // End of BITMAP_V2_INFO_HEADER\n        if (this.headerSize > header_types_js_1.default.BITMAP_V2_INFO_HEADER ||\n            this.compression === types_js_1.BmpCompression.BI_ALPHA_BIT_FIELDS) {\n            this.maskAlpha = this.readUInt32LE();\n        }\n        // End of BITMAP_V3_INFO_HEADER\n        if (this.headerSize > header_types_js_1.default.BITMAP_V3_INFO_HEADER) {\n            this.pos +=\n                header_types_js_1.default.BITMAP_V4_HEADER - header_types_js_1.default.BITMAP_V3_INFO_HEADER;\n        }\n        // End of BITMAP_V4_HEADER\n        if (this.headerSize > header_types_js_1.default.BITMAP_V4_HEADER) {\n            this.pos += header_types_js_1.default.BITMAP_V5_HEADER - header_types_js_1.default.BITMAP_V4_HEADER;\n        }\n        // End of BITMAP_V5_HEADER\n        if (this.bitPP <= 8 || this.colors > 0) {\n            const len = this.colors === 0 ? 1 << this.bitPP : this.colors;\n            this.palette = new Array(len);\n            for (let i = 0; i < len; i++) {\n                const blue = this.buffer.readUInt8(this.pos++);\n                const green = this.buffer.readUInt8(this.pos++);\n                const red = this.buffer.readUInt8(this.pos++);\n                const quad = this.buffer.readUInt8(this.pos++);\n                this.palette[i] = {\n                    red,\n                    green,\n                    blue,\n                    quad,\n                };\n            }\n        }\n        // End of color table\n        // Can the height ever be negative?\n        if (this.height < 0) {\n            this.height *= -1;\n            this.bottomUp = false;\n        }\n        const coloShift = (0, mask_color_js_1.default)(this.maskRed, this.maskGreen, this.maskBlue, this.maskAlpha);\n        this.shiftRed = coloShift.shiftRed;\n        this.shiftGreen = coloShift.shiftGreen;\n        this.shiftBlue = coloShift.shiftBlue;\n        this.shiftAlpha = coloShift.shiftAlpha;\n    }\n    parseRGBA() {\n        this.data = Buffer.alloc(this.width * this.height * 4);\n        switch (this.bitPP) {\n            case 1:\n                this.bit1();\n                break;\n            case 4:\n                this.bit4();\n                break;\n            case 8:\n                this.bit8();\n                break;\n            case 16:\n                this.bit16();\n                break;\n            case 24:\n                this.bit24();\n                break;\n            default:\n                this.bit32();\n        }\n    }\n    bit1() {\n        const xLen = Math.ceil(this.width / 8);\n        const mode = xLen % 4;\n        const padding = mode !== 0 ? 4 - mode : 0;\n        let lastLine;\n        this.scanImage(padding, xLen, (x, line) => {\n            if (line !== lastLine) {\n                lastLine = line;\n            }\n            const b = this.buffer.readUInt8(this.pos++);\n            const location = line * this.width * 4 + x * 8 * 4;\n            for (let i = 0; i < 8; i++) {\n                if (x * 8 + i < this.width) {\n                    const rgb = this.palette[(b >> (7 - i)) & 0x1];\n                    this.data[location + i * this.locAlpha] = 0;\n                    this.data[location + i * 4 + this.locBlue] = rgb.blue;\n                    this.data[location + i * 4 + this.locGreen] = rgb.green;\n                    this.data[location + i * 4 + this.locRed] = rgb.red;\n                }\n                else {\n                    break;\n                }\n            }\n        });\n    }\n    bit4() {\n        if (this.compression === types_js_1.BmpCompression.BI_RLE4) {\n            this.data.fill(0);\n            let lowNibble = false; //for all count of pixel\n            let lines = this.bottomUp ? this.height - 1 : 0;\n            let location = 0;\n            while (location < this.data.length) {\n                const a = this.buffer.readUInt8(this.pos++);\n                const b = this.buffer.readUInt8(this.pos++);\n                //absolute mode\n                if (a === 0) {\n                    if (b === 0) {\n                        //line end\n                        lines += this.bottomUp ? -1 : 1;\n                        location = lines * this.width * 4;\n                        lowNibble = false;\n                        continue;\n                    }\n                    if (b === 1) {\n                        // image end\n                        break;\n                    }\n                    if (b === 2) {\n                        // offset x, y\n                        const x = this.buffer.readUInt8(this.pos++);\n                        const y = this.buffer.readUInt8(this.pos++);\n                        lines += this.bottomUp ? -y : y;\n                        location += y * this.width * 4 + x * 4;\n                    }\n                    else {\n                        let c = this.buffer.readUInt8(this.pos++);\n                        for (let i = 0; i < b; i++) {\n                            location = this.setPixelData(location, lowNibble ? c & 0x0f : (c & 0xf0) >> 4);\n                            if (i & 1 && i + 1 < b) {\n                                c = this.buffer.readUInt8(this.pos++);\n                            }\n                            lowNibble = !lowNibble;\n                        }\n                        if ((((b + 1) >> 1) & 1) === 1) {\n                            this.pos++;\n                        }\n                    }\n                }\n                else {\n                    //encoded mode\n                    for (let i = 0; i < a; i++) {\n                        location = this.setPixelData(location, lowNibble ? b & 0x0f : (b & 0xf0) >> 4);\n                        lowNibble = !lowNibble;\n                    }\n                }\n            }\n        }\n        else {\n            const xLen = Math.ceil(this.width / 2);\n            const mode = xLen % 4;\n            const padding = mode !== 0 ? 4 - mode : 0;\n            this.scanImage(padding, xLen, (x, line) => {\n                const b = this.buffer.readUInt8(this.pos++);\n                const location = line * this.width * 4 + x * 2 * 4;\n                const first4 = b >> 4;\n                let rgb = this.palette[first4];\n                this.data[location] = 0;\n                this.data[location + 1] = rgb.blue;\n                this.data[location + 2] = rgb.green;\n                this.data[location + 3] = rgb.red;\n                if (x * 2 + 1 >= this.width) {\n                    // throw new Error('Something');\n                    return false;\n                }\n                const last4 = b & 0x0f;\n                rgb = this.palette[last4];\n                this.data[location + 4] = 0;\n                this.data[location + 4 + 1] = rgb.blue;\n                this.data[location + 4 + 2] = rgb.green;\n                this.data[location + 4 + 3] = rgb.red;\n            });\n        }\n    }\n    bit8() {\n        if (this.compression === types_js_1.BmpCompression.BI_RLE8) {\n            this.data.fill(0);\n            let lines = this.bottomUp ? this.height - 1 : 0;\n            let location = 0;\n            while (location < this.data.length) {\n                const a = this.buffer.readUInt8(this.pos++);\n                const b = this.buffer.readUInt8(this.pos++);\n                //absolute mode\n                if (a === 0) {\n                    if (b === 0) {\n                        //line end\n                        lines += this.bottomUp ? -1 : 1;\n                        location = lines * this.width * 4;\n                        continue;\n                    }\n                    if (b === 1) {\n                        //image end\n                        break;\n                    }\n                    if (b === 2) {\n                        //offset x,y\n                        const x = this.buffer.readUInt8(this.pos++);\n                        const y = this.buffer.readUInt8(this.pos++);\n                        lines += this.bottomUp ? -y : y;\n                        location += y * this.width * 4 + x * 4;\n                    }\n                    else {\n                        for (let i = 0; i < b; i++) {\n                            const c = this.buffer.readUInt8(this.pos++);\n                            location = this.setPixelData(location, c);\n                        }\n                        // @ts-ignore\n                        const shouldIncrement = b & (1 === 1);\n                        if (shouldIncrement) {\n                            this.pos++;\n                        }\n                    }\n                }\n                else {\n                    //encoded mode\n                    for (let i = 0; i < a; i++) {\n                        location = this.setPixelData(location, b);\n                    }\n                }\n            }\n        }\n        else {\n            const mode = this.width % 4;\n            const padding = mode !== 0 ? 4 - mode : 0;\n            this.scanImage(padding, this.width, (x, line) => {\n                const b = this.buffer.readUInt8(this.pos++);\n                const location = line * this.width * 4 + x * 4;\n                if (b < this.palette.length) {\n                    const rgb = this.palette[b];\n                    this.data[location] = 0;\n                    this.data[location + 1] = rgb.blue;\n                    this.data[location + 2] = rgb.green;\n                    this.data[location + 3] = rgb.red;\n                }\n                else {\n                    this.data[location] = 0;\n                    this.data[location + 1] = 0xff;\n                    this.data[location + 2] = 0xff;\n                    this.data[location + 3] = 0xff;\n                }\n            });\n        }\n    }\n    bit16() {\n        const padding = (this.width % 2) * 2;\n        this.scanImage(padding, this.width, (x, line) => {\n            const loc = line * this.width * 4 + x * 4;\n            const px = this.buffer.readUInt16LE(this.pos);\n            this.pos += 2;\n            this.data[loc + this.locRed] = this.shiftRed(px);\n            this.data[loc + this.locGreen] = this.shiftGreen(px);\n            this.data[loc + this.locBlue] = this.shiftBlue(px);\n            this.data[loc + this.locAlpha] = this.shiftAlpha(px);\n        });\n    }\n    bit24() {\n        const padding = this.width % 4;\n        this.scanImage(padding, this.width, (x, line) => {\n            const loc = line * this.width * 4 + x * 4;\n            const blue = this.buffer.readUInt8(this.pos++);\n            const green = this.buffer.readUInt8(this.pos++);\n            const red = this.buffer.readUInt8(this.pos++);\n            this.data[loc + this.locRed] = red;\n            this.data[loc + this.locGreen] = green;\n            this.data[loc + this.locBlue] = blue;\n            this.data[loc + this.locAlpha] = 0;\n        });\n    }\n    bit32() {\n        this.scanImage(0, this.width, (x, line) => {\n            const loc = line * this.width * 4 + x * 4;\n            const px = this.readUInt32LE();\n            this.data[loc + this.locRed] = this.shiftRed(px);\n            this.data[loc + this.locGreen] = this.shiftGreen(px);\n            this.data[loc + this.locBlue] = this.shiftBlue(px);\n            this.data[loc + this.locAlpha] = this.shiftAlpha(px);\n        });\n    }\n    scanImage(padding = 0, width = this.width, processPixel) {\n        for (let y = this.height - 1; y >= 0; y--) {\n            const line = this.bottomUp ? y : this.height - 1 - y;\n            for (let x = 0; x < width; x++) {\n                const result = processPixel.call(this, x, line);\n                if (result === false) {\n                    return;\n                }\n            }\n            this.pos += padding;\n        }\n    }\n    readUInt32LE() {\n        const value = this.buffer.readUInt32LE(this.pos);\n        this.pos += 4;\n        return value;\n    }\n    setPixelData(location, rgbIndex) {\n        const { blue, green, red } = this.palette[rgbIndex];\n        this.data[location + this.locAlpha] = 0;\n        this.data[location + 1 + this.locBlue] = blue;\n        this.data[location + 2 + this.locGreen] = green;\n        this.data[location + 3 + this.locRed] = red;\n        return location + 4;\n    }\n}\nexports[\"default\"] = BmpDecoder;\n//# sourceMappingURL=decoder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JtcC10c0AxLjAuOS9ub2RlX21vZHVsZXMvYm1wLXRzL2Rpc3QvY29tbW9uanMvZGVjb2Rlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBDQUEwQyxtQkFBTyxDQUFDLHdIQUFtQjtBQUNyRSx3Q0FBd0MsbUJBQU8sQ0FBQyxvSEFBaUI7QUFDakUsbUJBQW1CLG1CQUFPLENBQUMsMEdBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLFNBQVMsSUFBSSxlQUFlO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELGdCQUFnQjtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixTQUFTO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixPQUFPO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLE9BQU87QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsT0FBTztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxPQUFPO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxPQUFPO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0Esc0NBQXNDLFFBQVE7QUFDOUM7QUFDQSw0QkFBNEIsV0FBVztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG1CQUFtQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9taWtld2VzdGhhZC9EZXNrdG9wL1JlcG9zL3Nwb3JhZGljLWxhYnMtdGlsZS1leHRydWRlci9ub2RlX21vZHVsZXMvLnBucG0vYm1wLXRzQDEuMC45L25vZGVfbW9kdWxlcy9ibXAtdHMvZGlzdC9jb21tb25qcy9kZWNvZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaGVhZGVyX3R5cGVzX2pzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vaGVhZGVyLXR5cGVzLmpzXCIpKTtcbmNvbnN0IG1hc2tfY29sb3JfanNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tYXNrLWNvbG9yLmpzXCIpKTtcbmNvbnN0IHR5cGVzX2pzXzEgPSByZXF1aXJlKFwiLi90eXBlcy5qc1wiKTtcbmNsYXNzIEJtcERlY29kZXIge1xuICAgIC8vIEhlYWRlclxuICAgIGZsYWc7XG4gICAgZmlsZVNpemU7XG4gICAgcmVzZXJ2ZWQxO1xuICAgIHJlc2VydmVkMjtcbiAgICBvZmZzZXQ7XG4gICAgaGVhZGVyU2l6ZTtcbiAgICB3aWR0aDtcbiAgICBoZWlnaHQ7XG4gICAgcGxhbmVzO1xuICAgIGJpdFBQO1xuICAgIGNvbXByZXNzaW9uO1xuICAgIHJhd1NpemU7XG4gICAgaHI7XG4gICAgdnI7XG4gICAgY29sb3JzO1xuICAgIGltcG9ydGFudENvbG9ycztcbiAgICBwYWxldHRlO1xuICAgIGRhdGE7XG4gICAgbWFza1JlZDtcbiAgICBtYXNrR3JlZW47XG4gICAgbWFza0JsdWU7XG4gICAgbWFza0FscGhhO1xuICAgIHRvUkdCQTtcbiAgICBwb3M7XG4gICAgYm90dG9tVXA7XG4gICAgYnVmZmVyO1xuICAgIGxvY1JlZDtcbiAgICBsb2NHcmVlbjtcbiAgICBsb2NCbHVlO1xuICAgIGxvY0FscGhhO1xuICAgIHNoaWZ0UmVkO1xuICAgIHNoaWZ0R3JlZW47XG4gICAgc2hpZnRCbHVlO1xuICAgIHNoaWZ0QWxwaGE7XG4gICAgY29uc3RydWN0b3IoYnVmZmVyLCB7IHRvUkdCQSB9ID0geyB0b1JHQkE6IGZhbHNlIH0pIHtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gICAgICAgIHRoaXMudG9SR0JBID0gISF0b1JHQkE7XG4gICAgICAgIHRoaXMucG9zID0gMDtcbiAgICAgICAgdGhpcy5ib3R0b21VcCA9IHRydWU7XG4gICAgICAgIHRoaXMuZmxhZyA9IHRoaXMuYnVmZmVyLnRvU3RyaW5nKCd1dGYtOCcsIDAsICh0aGlzLnBvcyArPSAyKSk7XG4gICAgICAgIGlmICh0aGlzLmZsYWcgIT09ICdCTScpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBCTVAgRmlsZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubG9jUmVkID0gdGhpcy50b1JHQkEgPyAwIDogMztcbiAgICAgICAgdGhpcy5sb2NHcmVlbiA9IHRoaXMudG9SR0JBID8gMSA6IDI7XG4gICAgICAgIHRoaXMubG9jQmx1ZSA9IHRoaXMudG9SR0JBID8gMiA6IDE7XG4gICAgICAgIHRoaXMubG9jQWxwaGEgPSB0aGlzLnRvUkdCQSA/IDMgOiAwO1xuICAgICAgICB0aGlzLnBhcnNlSGVhZGVyKCk7XG4gICAgICAgIHRoaXMucGFyc2VSR0JBKCk7XG4gICAgfVxuICAgIHBhcnNlSGVhZGVyKCkge1xuICAgICAgICB0aGlzLmZpbGVTaXplID0gdGhpcy5yZWFkVUludDMyTEUoKTtcbiAgICAgICAgdGhpcy5yZXNlcnZlZDEgPSB0aGlzLmJ1ZmZlci5yZWFkVUludDE2TEUodGhpcy5wb3MpO1xuICAgICAgICB0aGlzLnBvcyArPSAyO1xuICAgICAgICB0aGlzLnJlc2VydmVkMiA9IHRoaXMuYnVmZmVyLnJlYWRVSW50MTZMRSh0aGlzLnBvcyk7XG4gICAgICAgIHRoaXMucG9zICs9IDI7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gdGhpcy5yZWFkVUludDMyTEUoKTtcbiAgICAgICAgLy8gRW5kIG9mIEJJVE1BUF9GSUxFX0hFQURFUlxuICAgICAgICB0aGlzLmhlYWRlclNpemUgPSB0aGlzLnJlYWRVSW50MzJMRSgpO1xuICAgICAgICBpZiAoISh0aGlzLmhlYWRlclNpemUgaW4gaGVhZGVyX3R5cGVzX2pzXzEuZGVmYXVsdCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgQk1QIGhlYWRlciBzaXplICR7dGhpcy5oZWFkZXJTaXplfWApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud2lkdGggPSB0aGlzLnJlYWRVSW50MzJMRSgpO1xuICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMucmVhZFVJbnQzMkxFKCk7XG4gICAgICAgIC8vIG5lZ2F0aXZlIHZhbHVlIGFyZSBwb3NzaWJsZSBoZXJlID0+IGltcGxpZXMgYm90dG9tIGRvd25cbiAgICAgICAgdGhpcy5oZWlnaHQgPVxuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPiAweDdmZmZmZmZmID8gdGhpcy5oZWlnaHQgLSAweDEwMDAwMDAwMCA6IHRoaXMuaGVpZ2h0O1xuICAgICAgICB0aGlzLnBsYW5lcyA9IHRoaXMuYnVmZmVyLnJlYWRVSW50MTZMRSh0aGlzLnBvcyk7XG4gICAgICAgIHRoaXMucG9zICs9IDI7XG4gICAgICAgIHRoaXMuYml0UFAgPSB0aGlzLmJ1ZmZlci5yZWFkVUludDE2TEUodGhpcy5wb3MpO1xuICAgICAgICB0aGlzLnBvcyArPSAyO1xuICAgICAgICB0aGlzLmNvbXByZXNzaW9uID0gdGhpcy5yZWFkVUludDMyTEUoKTtcbiAgICAgICAgdGhpcy5yYXdTaXplID0gdGhpcy5yZWFkVUludDMyTEUoKTtcbiAgICAgICAgdGhpcy5ociA9IHRoaXMucmVhZFVJbnQzMkxFKCk7XG4gICAgICAgIHRoaXMudnIgPSB0aGlzLnJlYWRVSW50MzJMRSgpO1xuICAgICAgICB0aGlzLmNvbG9ycyA9IHRoaXMucmVhZFVJbnQzMkxFKCk7XG4gICAgICAgIHRoaXMuaW1wb3J0YW50Q29sb3JzID0gdGhpcy5yZWFkVUludDMyTEUoKTtcbiAgICAgICAgLy8gRGUgZmFjdG8gZGVmYXVsdHNcbiAgICAgICAgaWYgKHRoaXMuYml0UFAgPT09IDMyKSB7XG4gICAgICAgICAgICB0aGlzLm1hc2tBbHBoYSA9IDA7XG4gICAgICAgICAgICB0aGlzLm1hc2tSZWQgPSAweDAwZmYwMDAwO1xuICAgICAgICAgICAgdGhpcy5tYXNrR3JlZW4gPSAweDAwMDBmZjAwO1xuICAgICAgICAgICAgdGhpcy5tYXNrQmx1ZSA9IDB4MDAwMDAwZmY7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5iaXRQUCA9PT0gMTYpIHtcbiAgICAgICAgICAgIHRoaXMubWFza0FscGhhID0gMDtcbiAgICAgICAgICAgIHRoaXMubWFza1JlZCA9IDB4N2MwMDtcbiAgICAgICAgICAgIHRoaXMubWFza0dyZWVuID0gMHgwM2UwO1xuICAgICAgICAgICAgdGhpcy5tYXNrQmx1ZSA9IDB4MDAxZjtcbiAgICAgICAgfVxuICAgICAgICAvLyBFbmQgb2YgQklUTUFQX0lORk9fSEVBREVSXG4gICAgICAgIGlmICh0aGlzLmhlYWRlclNpemUgPiBoZWFkZXJfdHlwZXNfanNfMS5kZWZhdWx0LkJJVE1BUF9JTkZPX0hFQURFUiB8fFxuICAgICAgICAgICAgdGhpcy5jb21wcmVzc2lvbiA9PT0gdHlwZXNfanNfMS5CbXBDb21wcmVzc2lvbi5CSV9CSVRfRklFTERTIHx8XG4gICAgICAgICAgICB0aGlzLmNvbXByZXNzaW9uID09PSB0eXBlc19qc18xLkJtcENvbXByZXNzaW9uLkJJX0FMUEhBX0JJVF9GSUVMRFMpIHtcbiAgICAgICAgICAgIHRoaXMubWFza1JlZCA9IHRoaXMucmVhZFVJbnQzMkxFKCk7XG4gICAgICAgICAgICB0aGlzLm1hc2tHcmVlbiA9IHRoaXMucmVhZFVJbnQzMkxFKCk7XG4gICAgICAgICAgICB0aGlzLm1hc2tCbHVlID0gdGhpcy5yZWFkVUludDMyTEUoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBFbmQgb2YgQklUTUFQX1YyX0lORk9fSEVBREVSXG4gICAgICAgIGlmICh0aGlzLmhlYWRlclNpemUgPiBoZWFkZXJfdHlwZXNfanNfMS5kZWZhdWx0LkJJVE1BUF9WMl9JTkZPX0hFQURFUiB8fFxuICAgICAgICAgICAgdGhpcy5jb21wcmVzc2lvbiA9PT0gdHlwZXNfanNfMS5CbXBDb21wcmVzc2lvbi5CSV9BTFBIQV9CSVRfRklFTERTKSB7XG4gICAgICAgICAgICB0aGlzLm1hc2tBbHBoYSA9IHRoaXMucmVhZFVJbnQzMkxFKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5kIG9mIEJJVE1BUF9WM19JTkZPX0hFQURFUlxuICAgICAgICBpZiAodGhpcy5oZWFkZXJTaXplID4gaGVhZGVyX3R5cGVzX2pzXzEuZGVmYXVsdC5CSVRNQVBfVjNfSU5GT19IRUFERVIpIHtcbiAgICAgICAgICAgIHRoaXMucG9zICs9XG4gICAgICAgICAgICAgICAgaGVhZGVyX3R5cGVzX2pzXzEuZGVmYXVsdC5CSVRNQVBfVjRfSEVBREVSIC0gaGVhZGVyX3R5cGVzX2pzXzEuZGVmYXVsdC5CSVRNQVBfVjNfSU5GT19IRUFERVI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5kIG9mIEJJVE1BUF9WNF9IRUFERVJcbiAgICAgICAgaWYgKHRoaXMuaGVhZGVyU2l6ZSA+IGhlYWRlcl90eXBlc19qc18xLmRlZmF1bHQuQklUTUFQX1Y0X0hFQURFUikge1xuICAgICAgICAgICAgdGhpcy5wb3MgKz0gaGVhZGVyX3R5cGVzX2pzXzEuZGVmYXVsdC5CSVRNQVBfVjVfSEVBREVSIC0gaGVhZGVyX3R5cGVzX2pzXzEuZGVmYXVsdC5CSVRNQVBfVjRfSEVBREVSO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuZCBvZiBCSVRNQVBfVjVfSEVBREVSXG4gICAgICAgIGlmICh0aGlzLmJpdFBQIDw9IDggfHwgdGhpcy5jb2xvcnMgPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBsZW4gPSB0aGlzLmNvbG9ycyA9PT0gMCA/IDEgPDwgdGhpcy5iaXRQUCA6IHRoaXMuY29sb3JzO1xuICAgICAgICAgICAgdGhpcy5wYWxldHRlID0gbmV3IEFycmF5KGxlbik7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYmx1ZSA9IHRoaXMuYnVmZmVyLnJlYWRVSW50OCh0aGlzLnBvcysrKTtcbiAgICAgICAgICAgICAgICBjb25zdCBncmVlbiA9IHRoaXMuYnVmZmVyLnJlYWRVSW50OCh0aGlzLnBvcysrKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZWQgPSB0aGlzLmJ1ZmZlci5yZWFkVUludDgodGhpcy5wb3MrKyk7XG4gICAgICAgICAgICAgICAgY29uc3QgcXVhZCA9IHRoaXMuYnVmZmVyLnJlYWRVSW50OCh0aGlzLnBvcysrKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBhbGV0dGVbaV0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZCxcbiAgICAgICAgICAgICAgICAgICAgZ3JlZW4sXG4gICAgICAgICAgICAgICAgICAgIGJsdWUsXG4gICAgICAgICAgICAgICAgICAgIHF1YWQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBFbmQgb2YgY29sb3IgdGFibGVcbiAgICAgICAgLy8gQ2FuIHRoZSBoZWlnaHQgZXZlciBiZSBuZWdhdGl2ZT9cbiAgICAgICAgaWYgKHRoaXMuaGVpZ2h0IDwgMCkge1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgKj0gLTE7XG4gICAgICAgICAgICB0aGlzLmJvdHRvbVVwID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29sb1NoaWZ0ID0gKDAsIG1hc2tfY29sb3JfanNfMS5kZWZhdWx0KSh0aGlzLm1hc2tSZWQsIHRoaXMubWFza0dyZWVuLCB0aGlzLm1hc2tCbHVlLCB0aGlzLm1hc2tBbHBoYSk7XG4gICAgICAgIHRoaXMuc2hpZnRSZWQgPSBjb2xvU2hpZnQuc2hpZnRSZWQ7XG4gICAgICAgIHRoaXMuc2hpZnRHcmVlbiA9IGNvbG9TaGlmdC5zaGlmdEdyZWVuO1xuICAgICAgICB0aGlzLnNoaWZ0Qmx1ZSA9IGNvbG9TaGlmdC5zaGlmdEJsdWU7XG4gICAgICAgIHRoaXMuc2hpZnRBbHBoYSA9IGNvbG9TaGlmdC5zaGlmdEFscGhhO1xuICAgIH1cbiAgICBwYXJzZVJHQkEoKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IEJ1ZmZlci5hbGxvYyh0aGlzLndpZHRoICogdGhpcy5oZWlnaHQgKiA0KTtcbiAgICAgICAgc3dpdGNoICh0aGlzLmJpdFBQKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgdGhpcy5iaXQxKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgdGhpcy5iaXQ0KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgdGhpcy5iaXQ4KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgICAgICAgIHRoaXMuYml0MTYoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjQ6XG4gICAgICAgICAgICAgICAgdGhpcy5iaXQyNCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aGlzLmJpdDMyKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYml0MSgpIHtcbiAgICAgICAgY29uc3QgeExlbiA9IE1hdGguY2VpbCh0aGlzLndpZHRoIC8gOCk7XG4gICAgICAgIGNvbnN0IG1vZGUgPSB4TGVuICUgNDtcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IG1vZGUgIT09IDAgPyA0IC0gbW9kZSA6IDA7XG4gICAgICAgIGxldCBsYXN0TGluZTtcbiAgICAgICAgdGhpcy5zY2FuSW1hZ2UocGFkZGluZywgeExlbiwgKHgsIGxpbmUpID0+IHtcbiAgICAgICAgICAgIGlmIChsaW5lICE9PSBsYXN0TGluZSkge1xuICAgICAgICAgICAgICAgIGxhc3RMaW5lID0gbGluZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGIgPSB0aGlzLmJ1ZmZlci5yZWFkVUludDgodGhpcy5wb3MrKyk7XG4gICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGxpbmUgKiB0aGlzLndpZHRoICogNCArIHggKiA4ICogNDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgODsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHggKiA4ICsgaSA8IHRoaXMud2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmdiID0gdGhpcy5wYWxldHRlWyhiID4+ICg3IC0gaSkpICYgMHgxXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhW2xvY2F0aW9uICsgaSAqIHRoaXMubG9jQWxwaGFdID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhW2xvY2F0aW9uICsgaSAqIDQgKyB0aGlzLmxvY0JsdWVdID0gcmdiLmJsdWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YVtsb2NhdGlvbiArIGkgKiA0ICsgdGhpcy5sb2NHcmVlbl0gPSByZ2IuZ3JlZW47XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YVtsb2NhdGlvbiArIGkgKiA0ICsgdGhpcy5sb2NSZWRdID0gcmdiLnJlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGJpdDQoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbXByZXNzaW9uID09PSB0eXBlc19qc18xLkJtcENvbXByZXNzaW9uLkJJX1JMRTQpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5maWxsKDApO1xuICAgICAgICAgICAgbGV0IGxvd05pYmJsZSA9IGZhbHNlOyAvL2ZvciBhbGwgY291bnQgb2YgcGl4ZWxcbiAgICAgICAgICAgIGxldCBsaW5lcyA9IHRoaXMuYm90dG9tVXAgPyB0aGlzLmhlaWdodCAtIDEgOiAwO1xuICAgICAgICAgICAgbGV0IGxvY2F0aW9uID0gMDtcbiAgICAgICAgICAgIHdoaWxlIChsb2NhdGlvbiA8IHRoaXMuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gdGhpcy5idWZmZXIucmVhZFVJbnQ4KHRoaXMucG9zKyspO1xuICAgICAgICAgICAgICAgIGNvbnN0IGIgPSB0aGlzLmJ1ZmZlci5yZWFkVUludDgodGhpcy5wb3MrKyk7XG4gICAgICAgICAgICAgICAgLy9hYnNvbHV0ZSBtb2RlXG4gICAgICAgICAgICAgICAgaWYgKGEgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbGluZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVzICs9IHRoaXMuYm90dG9tVXAgPyAtMSA6IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbiA9IGxpbmVzICogdGhpcy53aWR0aCAqIDQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb3dOaWJibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChiID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpbWFnZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChiID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvZmZzZXQgeCwgeVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeCA9IHRoaXMuYnVmZmVyLnJlYWRVSW50OCh0aGlzLnBvcysrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHkgPSB0aGlzLmJ1ZmZlci5yZWFkVUludDgodGhpcy5wb3MrKyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lcyArPSB0aGlzLmJvdHRvbVVwID8gLXkgOiB5O1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24gKz0geSAqIHRoaXMud2lkdGggKiA0ICsgeCAqIDQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYyA9IHRoaXMuYnVmZmVyLnJlYWRVSW50OCh0aGlzLnBvcysrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24gPSB0aGlzLnNldFBpeGVsRGF0YShsb2NhdGlvbiwgbG93TmliYmxlID8gYyAmIDB4MGYgOiAoYyAmIDB4ZjApID4+IDQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpICYgMSAmJiBpICsgMSA8IGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IHRoaXMuYnVmZmVyLnJlYWRVSW50OCh0aGlzLnBvcysrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG93TmliYmxlID0gIWxvd05pYmJsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoKChiICsgMSkgPj4gMSkgJiAxKSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vZW5jb2RlZCBtb2RlXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbiA9IHRoaXMuc2V0UGl4ZWxEYXRhKGxvY2F0aW9uLCBsb3dOaWJibGUgPyBiICYgMHgwZiA6IChiICYgMHhmMCkgPj4gNCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb3dOaWJibGUgPSAhbG93TmliYmxlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgeExlbiA9IE1hdGguY2VpbCh0aGlzLndpZHRoIC8gMik7XG4gICAgICAgICAgICBjb25zdCBtb2RlID0geExlbiAlIDQ7XG4gICAgICAgICAgICBjb25zdCBwYWRkaW5nID0gbW9kZSAhPT0gMCA/IDQgLSBtb2RlIDogMDtcbiAgICAgICAgICAgIHRoaXMuc2NhbkltYWdlKHBhZGRpbmcsIHhMZW4sICh4LCBsaW5lKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYiA9IHRoaXMuYnVmZmVyLnJlYWRVSW50OCh0aGlzLnBvcysrKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGxpbmUgKiB0aGlzLndpZHRoICogNCArIHggKiAyICogNDtcbiAgICAgICAgICAgICAgICBjb25zdCBmaXJzdDQgPSBiID4+IDQ7XG4gICAgICAgICAgICAgICAgbGV0IHJnYiA9IHRoaXMucGFsZXR0ZVtmaXJzdDRdO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YVtsb2NhdGlvbl0gPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YVtsb2NhdGlvbiArIDFdID0gcmdiLmJsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhW2xvY2F0aW9uICsgMl0gPSByZ2IuZ3JlZW47XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhW2xvY2F0aW9uICsgM10gPSByZ2IucmVkO1xuICAgICAgICAgICAgICAgIGlmICh4ICogMiArIDEgPj0gdGhpcy53aWR0aCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoJ1NvbWV0aGluZycpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3Q0ID0gYiAmIDB4MGY7XG4gICAgICAgICAgICAgICAgcmdiID0gdGhpcy5wYWxldHRlW2xhc3Q0XTtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFbbG9jYXRpb24gKyA0XSA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhW2xvY2F0aW9uICsgNCArIDFdID0gcmdiLmJsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhW2xvY2F0aW9uICsgNCArIDJdID0gcmdiLmdyZWVuO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YVtsb2NhdGlvbiArIDQgKyAzXSA9IHJnYi5yZWQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBiaXQ4KCkge1xuICAgICAgICBpZiAodGhpcy5jb21wcmVzc2lvbiA9PT0gdHlwZXNfanNfMS5CbXBDb21wcmVzc2lvbi5CSV9STEU4KSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEuZmlsbCgwKTtcbiAgICAgICAgICAgIGxldCBsaW5lcyA9IHRoaXMuYm90dG9tVXAgPyB0aGlzLmhlaWdodCAtIDEgOiAwO1xuICAgICAgICAgICAgbGV0IGxvY2F0aW9uID0gMDtcbiAgICAgICAgICAgIHdoaWxlIChsb2NhdGlvbiA8IHRoaXMuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gdGhpcy5idWZmZXIucmVhZFVJbnQ4KHRoaXMucG9zKyspO1xuICAgICAgICAgICAgICAgIGNvbnN0IGIgPSB0aGlzLmJ1ZmZlci5yZWFkVUludDgodGhpcy5wb3MrKyk7XG4gICAgICAgICAgICAgICAgLy9hYnNvbHV0ZSBtb2RlXG4gICAgICAgICAgICAgICAgaWYgKGEgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbGluZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVzICs9IHRoaXMuYm90dG9tVXAgPyAtMSA6IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbiA9IGxpbmVzICogdGhpcy53aWR0aCAqIDQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoYiA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9pbWFnZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChiID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL29mZnNldCB4LHlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHggPSB0aGlzLmJ1ZmZlci5yZWFkVUludDgodGhpcy5wb3MrKyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB5ID0gdGhpcy5idWZmZXIucmVhZFVJbnQ4KHRoaXMucG9zKyspO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZXMgKz0gdGhpcy5ib3R0b21VcCA/IC15IDogeTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uICs9IHkgKiB0aGlzLndpZHRoICogNCArIHggKiA0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjID0gdGhpcy5idWZmZXIucmVhZFVJbnQ4KHRoaXMucG9zKyspO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uID0gdGhpcy5zZXRQaXhlbERhdGEobG9jYXRpb24sIGMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2hvdWxkSW5jcmVtZW50ID0gYiAmICgxID09PSAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaG91bGRJbmNyZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvL2VuY29kZWQgbW9kZVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGE7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24gPSB0aGlzLnNldFBpeGVsRGF0YShsb2NhdGlvbiwgYik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBtb2RlID0gdGhpcy53aWR0aCAlIDQ7XG4gICAgICAgICAgICBjb25zdCBwYWRkaW5nID0gbW9kZSAhPT0gMCA/IDQgLSBtb2RlIDogMDtcbiAgICAgICAgICAgIHRoaXMuc2NhbkltYWdlKHBhZGRpbmcsIHRoaXMud2lkdGgsICh4LCBsaW5lKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYiA9IHRoaXMuYnVmZmVyLnJlYWRVSW50OCh0aGlzLnBvcysrKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGxpbmUgKiB0aGlzLndpZHRoICogNCArIHggKiA0O1xuICAgICAgICAgICAgICAgIGlmIChiIDwgdGhpcy5wYWxldHRlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZ2IgPSB0aGlzLnBhbGV0dGVbYl07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YVtsb2NhdGlvbl0gPSAwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFbbG9jYXRpb24gKyAxXSA9IHJnYi5ibHVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFbbG9jYXRpb24gKyAyXSA9IHJnYi5ncmVlbjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhW2xvY2F0aW9uICsgM10gPSByZ2IucmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhW2xvY2F0aW9uXSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YVtsb2NhdGlvbiArIDFdID0gMHhmZjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhW2xvY2F0aW9uICsgMl0gPSAweGZmO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFbbG9jYXRpb24gKyAzXSA9IDB4ZmY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYml0MTYoKSB7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSAodGhpcy53aWR0aCAlIDIpICogMjtcbiAgICAgICAgdGhpcy5zY2FuSW1hZ2UocGFkZGluZywgdGhpcy53aWR0aCwgKHgsIGxpbmUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGxpbmUgKiB0aGlzLndpZHRoICogNCArIHggKiA0O1xuICAgICAgICAgICAgY29uc3QgcHggPSB0aGlzLmJ1ZmZlci5yZWFkVUludDE2TEUodGhpcy5wb3MpO1xuICAgICAgICAgICAgdGhpcy5wb3MgKz0gMjtcbiAgICAgICAgICAgIHRoaXMuZGF0YVtsb2MgKyB0aGlzLmxvY1JlZF0gPSB0aGlzLnNoaWZ0UmVkKHB4KTtcbiAgICAgICAgICAgIHRoaXMuZGF0YVtsb2MgKyB0aGlzLmxvY0dyZWVuXSA9IHRoaXMuc2hpZnRHcmVlbihweCk7XG4gICAgICAgICAgICB0aGlzLmRhdGFbbG9jICsgdGhpcy5sb2NCbHVlXSA9IHRoaXMuc2hpZnRCbHVlKHB4KTtcbiAgICAgICAgICAgIHRoaXMuZGF0YVtsb2MgKyB0aGlzLmxvY0FscGhhXSA9IHRoaXMuc2hpZnRBbHBoYShweCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBiaXQyNCgpIHtcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IHRoaXMud2lkdGggJSA0O1xuICAgICAgICB0aGlzLnNjYW5JbWFnZShwYWRkaW5nLCB0aGlzLndpZHRoLCAoeCwgbGluZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gbGluZSAqIHRoaXMud2lkdGggKiA0ICsgeCAqIDQ7XG4gICAgICAgICAgICBjb25zdCBibHVlID0gdGhpcy5idWZmZXIucmVhZFVJbnQ4KHRoaXMucG9zKyspO1xuICAgICAgICAgICAgY29uc3QgZ3JlZW4gPSB0aGlzLmJ1ZmZlci5yZWFkVUludDgodGhpcy5wb3MrKyk7XG4gICAgICAgICAgICBjb25zdCByZWQgPSB0aGlzLmJ1ZmZlci5yZWFkVUludDgodGhpcy5wb3MrKyk7XG4gICAgICAgICAgICB0aGlzLmRhdGFbbG9jICsgdGhpcy5sb2NSZWRdID0gcmVkO1xuICAgICAgICAgICAgdGhpcy5kYXRhW2xvYyArIHRoaXMubG9jR3JlZW5dID0gZ3JlZW47XG4gICAgICAgICAgICB0aGlzLmRhdGFbbG9jICsgdGhpcy5sb2NCbHVlXSA9IGJsdWU7XG4gICAgICAgICAgICB0aGlzLmRhdGFbbG9jICsgdGhpcy5sb2NBbHBoYV0gPSAwO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYml0MzIoKSB7XG4gICAgICAgIHRoaXMuc2NhbkltYWdlKDAsIHRoaXMud2lkdGgsICh4LCBsaW5lKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBsaW5lICogdGhpcy53aWR0aCAqIDQgKyB4ICogNDtcbiAgICAgICAgICAgIGNvbnN0IHB4ID0gdGhpcy5yZWFkVUludDMyTEUoKTtcbiAgICAgICAgICAgIHRoaXMuZGF0YVtsb2MgKyB0aGlzLmxvY1JlZF0gPSB0aGlzLnNoaWZ0UmVkKHB4KTtcbiAgICAgICAgICAgIHRoaXMuZGF0YVtsb2MgKyB0aGlzLmxvY0dyZWVuXSA9IHRoaXMuc2hpZnRHcmVlbihweCk7XG4gICAgICAgICAgICB0aGlzLmRhdGFbbG9jICsgdGhpcy5sb2NCbHVlXSA9IHRoaXMuc2hpZnRCbHVlKHB4KTtcbiAgICAgICAgICAgIHRoaXMuZGF0YVtsb2MgKyB0aGlzLmxvY0FscGhhXSA9IHRoaXMuc2hpZnRBbHBoYShweCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzY2FuSW1hZ2UocGFkZGluZyA9IDAsIHdpZHRoID0gdGhpcy53aWR0aCwgcHJvY2Vzc1BpeGVsKSB7XG4gICAgICAgIGZvciAobGV0IHkgPSB0aGlzLmhlaWdodCAtIDE7IHkgPj0gMDsgeS0tKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5lID0gdGhpcy5ib3R0b21VcCA/IHkgOiB0aGlzLmhlaWdodCAtIDEgLSB5O1xuICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gcHJvY2Vzc1BpeGVsLmNhbGwodGhpcywgeCwgbGluZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucG9zICs9IHBhZGRpbmc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVhZFVJbnQzMkxFKCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuYnVmZmVyLnJlYWRVSW50MzJMRSh0aGlzLnBvcyk7XG4gICAgICAgIHRoaXMucG9zICs9IDQ7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgc2V0UGl4ZWxEYXRhKGxvY2F0aW9uLCByZ2JJbmRleCkge1xuICAgICAgICBjb25zdCB7IGJsdWUsIGdyZWVuLCByZWQgfSA9IHRoaXMucGFsZXR0ZVtyZ2JJbmRleF07XG4gICAgICAgIHRoaXMuZGF0YVtsb2NhdGlvbiArIHRoaXMubG9jQWxwaGFdID0gMDtcbiAgICAgICAgdGhpcy5kYXRhW2xvY2F0aW9uICsgMSArIHRoaXMubG9jQmx1ZV0gPSBibHVlO1xuICAgICAgICB0aGlzLmRhdGFbbG9jYXRpb24gKyAyICsgdGhpcy5sb2NHcmVlbl0gPSBncmVlbjtcbiAgICAgICAgdGhpcy5kYXRhW2xvY2F0aW9uICsgMyArIHRoaXMubG9jUmVkXSA9IHJlZDtcbiAgICAgICAgcmV0dXJuIGxvY2F0aW9uICsgNDtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBCbXBEZWNvZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVjb2Rlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/bmp-ts@1.0.9/node_modules/bmp-ts/dist/commonjs/decoder.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/bmp-ts@1.0.9/node_modules/bmp-ts/dist/commonjs/encoder.js":
/*!******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/bmp-ts@1.0.9/node_modules/bmp-ts/dist/commonjs/encoder.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst header_types_js_1 = __importDefault(__webpack_require__(/*! ./header-types.js */ \"(ssr)/../../node_modules/.pnpm/bmp-ts@1.0.9/node_modules/bmp-ts/dist/commonjs/header-types.js\"));\nfunction createInteger(numbers) {\n    return numbers.reduce((final, n) => (final << 1) | n, 0);\n}\nfunction createColor(color) {\n    return ((color.quad << 24) | (color.red << 16) | (color.green << 8) | color.blue);\n}\nclass BmpEncoder {\n    fileSize;\n    reserved1;\n    reserved2;\n    offset;\n    width;\n    flag;\n    height;\n    planes;\n    bitPP;\n    compress;\n    hr;\n    vr;\n    colors;\n    importantColors;\n    rawSize;\n    headerSize;\n    data;\n    palette;\n    extraBytes;\n    buffer;\n    bytesInColor;\n    pos;\n    constructor(imgData) {\n        this.buffer = imgData.data;\n        this.width = imgData.width;\n        this.height = imgData.height;\n        this.headerSize = header_types_js_1.default.BITMAP_INFO_HEADER;\n        // Header\n        this.flag = 'BM';\n        this.bitPP = imgData.bitPP || 24;\n        this.offset = 54;\n        this.reserved1 = imgData.reserved1 || 0;\n        this.reserved2 = imgData.reserved2 || 0;\n        this.planes = 1;\n        this.compress = 0;\n        this.hr = imgData.hr || 0;\n        this.vr = imgData.vr || 0;\n        this.importantColors = imgData.importantColors || 0;\n        this.colors = Math.min(2 ** (this.bitPP - 1 || 1), imgData.colors || Infinity);\n        this.palette = imgData.palette || [];\n        if (this.colors && this.bitPP < 16) {\n            this.offset += this.colors * 4;\n        }\n        else {\n            this.colors = 0;\n        }\n        switch (this.bitPP) {\n            case 32:\n                this.bytesInColor = 4;\n                break;\n            case 16:\n                this.bytesInColor = 2;\n                break;\n            case 8:\n                this.bytesInColor = 1;\n                break;\n            case 4:\n                this.bytesInColor = 1 / 2;\n                break;\n            case 1:\n                this.bytesInColor = 1 / 8;\n                break;\n            default:\n                this.bytesInColor = 3;\n                this.bitPP = 24;\n        }\n        const rowWidth = (this.width * this.bitPP) / 32;\n        const rowBytes = Math.ceil(rowWidth);\n        this.extraBytes = (rowBytes - rowWidth) * 4;\n        // Why 2?\n        this.rawSize = this.height * rowBytes * 4 + 2;\n        this.fileSize = this.rawSize + this.offset;\n        this.data = Buffer.alloc(this.fileSize, 0x1);\n        this.pos = 0;\n        this.encode();\n    }\n    encode() {\n        this.pos = 0;\n        this.writeHeader();\n        switch (this.bitPP) {\n            case 32:\n                this.bit32();\n                break;\n            case 16:\n                this.bit16();\n                break;\n            case 8:\n                this.bit8();\n                break;\n            case 4:\n                this.bit4();\n                break;\n            case 1:\n                this.bit1();\n                break;\n            default:\n                this.bit24();\n        }\n    }\n    writeHeader() {\n        this.data.write(this.flag, this.pos, 2);\n        this.pos += 2;\n        this.writeUInt32LE(this.fileSize);\n        // Writing 2 UInt16LE resulted in a weird bug\n        this.writeUInt32LE((this.reserved1 << 16) | this.reserved2);\n        this.writeUInt32LE(this.offset);\n        this.writeUInt32LE(this.headerSize);\n        this.writeUInt32LE(this.width);\n        this.writeUInt32LE(this.height);\n        this.data.writeUInt16LE(this.planes, this.pos);\n        this.pos += 2;\n        this.data.writeUInt16LE(this.bitPP, this.pos);\n        this.pos += 2;\n        this.writeUInt32LE(this.compress);\n        this.writeUInt32LE(this.rawSize);\n        this.writeUInt32LE(this.hr);\n        this.writeUInt32LE(this.vr);\n        this.writeUInt32LE(this.colors);\n        this.writeUInt32LE(this.importantColors);\n    }\n    bit1() {\n        if (this.palette.length && this.colors === 2) {\n            this.initColors(1);\n        }\n        else {\n            this.writeUInt32LE(0x00ffffff); // Black\n            this.writeUInt32LE(0x00000000); // White\n        }\n        this.pos += 1; // ?\n        let lineArr = [];\n        this.writeImage((p, index, x) => {\n            let i = index;\n            i++;\n            const b = this.buffer[i++];\n            const g = this.buffer[i++];\n            const r = this.buffer[i++];\n            const brightness = r * 0.2126 + g * 0.7152 + b * 0.0722;\n            lineArr.push(brightness > 127 ? 0 : 1);\n            if ((x + 1) % 8 === 0) {\n                this.data[p - 1] = createInteger(lineArr);\n                lineArr = [];\n            }\n            else if (x === this.width - 1 && lineArr.length > 0) {\n                this.data[p - 1] = createInteger(lineArr) << 4;\n                lineArr = [];\n            }\n            return i;\n        });\n    }\n    bit4() {\n        const colors = this.initColors(4);\n        let integerPair = [];\n        this.writeImage((p, index, x) => {\n            let i = index;\n            const colorInt = createColor({\n                quad: this.buffer[i++],\n                blue: this.buffer[i++],\n                green: this.buffer[i++],\n                red: this.buffer[i++],\n            });\n            const colorExists = colors.findIndex((c) => c === colorInt);\n            if (colorExists !== -1) {\n                integerPair.push(colorExists);\n            }\n            else {\n                integerPair.push(0);\n            }\n            if ((x + 1) % 2 === 0) {\n                this.data[p] = (integerPair[0] << 4) | integerPair[1];\n                integerPair = [];\n            }\n            return i;\n        });\n    }\n    bit8() {\n        const colors = this.initColors(8);\n        this.writeImage((p, index) => {\n            let i = index;\n            const colorInt = createColor({\n                quad: this.buffer[i++],\n                blue: this.buffer[i++],\n                green: this.buffer[i++],\n                red: this.buffer[i++],\n            });\n            const colorExists = colors.findIndex((c) => c === colorInt);\n            if (colorExists !== -1) {\n                this.data[p] = colorExists;\n            }\n            else {\n                this.data[p] = 0;\n            }\n            return i;\n        });\n    }\n    bit16() {\n        this.writeImage((p, index) => {\n            let i = index + 1;\n            const b = this.buffer[i++] / 8; // b\n            const g = this.buffer[i++] / 8; // g\n            const r = this.buffer[i++] / 8; // r\n            const color = (r << 10) | (g << 5) | b;\n            this.data[p] = color & 0x00ff;\n            this.data[p + 1] = (color & 0xff00) >> 8;\n            return i;\n        });\n    }\n    bit24() {\n        this.writeImage((p, index) => {\n            let i = index + 1;\n            this.data[p] = this.buffer[i++]; //b\n            this.data[p + 1] = this.buffer[i++]; //g\n            this.data[p + 2] = this.buffer[i++]; //r\n            return i;\n        });\n    }\n    bit32() {\n        this.writeImage((p, index) => {\n            let i = index;\n            this.data[p + 3] = this.buffer[i++]; // a\n            this.data[p] = this.buffer[i++]; // b\n            this.data[p + 1] = this.buffer[i++]; // g\n            this.data[p + 2] = this.buffer[i++]; // r\n            return i;\n        });\n    }\n    writeImage(writePixel) {\n        const rowBytes = this.extraBytes + this.width * this.bytesInColor;\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const p = Math.floor(this.pos + (this.height - 1 - y) * rowBytes + x * this.bytesInColor);\n                i = writePixel.call(this, p, i, x, y);\n            }\n        }\n    }\n    initColors(bit) {\n        const colors = [];\n        if (this.palette.length) {\n            for (let i = 0; i < this.colors; i++) {\n                const rootColor = createColor(this.palette[i]);\n                this.writeUInt32LE(rootColor);\n                colors.push(rootColor);\n            }\n        }\n        else {\n            throw new Error(`To encode ${bit}-bit BMPs a pallette is needed. Please choose up to ${this.colors} colors. Colors must be 32-bit integers.`);\n        }\n        return colors;\n    }\n    writeUInt32LE(value) {\n        this.data.writeUInt32LE(value, this.pos);\n        this.pos += 4;\n    }\n}\nexports[\"default\"] = BmpEncoder;\n//# sourceMappingURL=encoder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/bmp-ts@1.0.9/node_modules/bmp-ts/dist/commonjs/encoder.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/bmp-ts@1.0.9/node_modules/bmp-ts/dist/commonjs/header-types.js":
/*!***********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/bmp-ts@1.0.9/node_modules/bmp-ts/dist/commonjs/header-types.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar HeaderTypes;\n(function (HeaderTypes) {\n    HeaderTypes[HeaderTypes[\"BITMAP_INFO_HEADER\"] = 40] = \"BITMAP_INFO_HEADER\";\n    HeaderTypes[HeaderTypes[\"BITMAP_V2_INFO_HEADER\"] = 52] = \"BITMAP_V2_INFO_HEADER\";\n    HeaderTypes[HeaderTypes[\"BITMAP_V3_INFO_HEADER\"] = 56] = \"BITMAP_V3_INFO_HEADER\";\n    HeaderTypes[HeaderTypes[\"BITMAP_V4_HEADER\"] = 108] = \"BITMAP_V4_HEADER\";\n    HeaderTypes[HeaderTypes[\"BITMAP_V5_HEADER\"] = 124] = \"BITMAP_V5_HEADER\";\n})(HeaderTypes || (HeaderTypes = {}));\nexports[\"default\"] = HeaderTypes;\n//# sourceMappingURL=header-types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JtcC10c0AxLjAuOS9ub2RlX21vZHVsZXMvYm1wLXRzL2Rpc3QvY29tbW9uanMvaGVhZGVyLXR5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxrQ0FBa0M7QUFDbkMsa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL21pa2V3ZXN0aGFkL0Rlc2t0b3AvUmVwb3Mvc3BvcmFkaWMtbGFicy10aWxlLWV4dHJ1ZGVyL25vZGVfbW9kdWxlcy8ucG5wbS9ibXAtdHNAMS4wLjkvbm9kZV9tb2R1bGVzL2JtcC10cy9kaXN0L2NvbW1vbmpzL2hlYWRlci10eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBIZWFkZXJUeXBlcztcbihmdW5jdGlvbiAoSGVhZGVyVHlwZXMpIHtcbiAgICBIZWFkZXJUeXBlc1tIZWFkZXJUeXBlc1tcIkJJVE1BUF9JTkZPX0hFQURFUlwiXSA9IDQwXSA9IFwiQklUTUFQX0lORk9fSEVBREVSXCI7XG4gICAgSGVhZGVyVHlwZXNbSGVhZGVyVHlwZXNbXCJCSVRNQVBfVjJfSU5GT19IRUFERVJcIl0gPSA1Ml0gPSBcIkJJVE1BUF9WMl9JTkZPX0hFQURFUlwiO1xuICAgIEhlYWRlclR5cGVzW0hlYWRlclR5cGVzW1wiQklUTUFQX1YzX0lORk9fSEVBREVSXCJdID0gNTZdID0gXCJCSVRNQVBfVjNfSU5GT19IRUFERVJcIjtcbiAgICBIZWFkZXJUeXBlc1tIZWFkZXJUeXBlc1tcIkJJVE1BUF9WNF9IRUFERVJcIl0gPSAxMDhdID0gXCJCSVRNQVBfVjRfSEVBREVSXCI7XG4gICAgSGVhZGVyVHlwZXNbSGVhZGVyVHlwZXNbXCJCSVRNQVBfVjVfSEVBREVSXCJdID0gMTI0XSA9IFwiQklUTUFQX1Y1X0hFQURFUlwiO1xufSkoSGVhZGVyVHlwZXMgfHwgKEhlYWRlclR5cGVzID0ge30pKTtcbmV4cG9ydHMuZGVmYXVsdCA9IEhlYWRlclR5cGVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVhZGVyLXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/bmp-ts@1.0.9/node_modules/bmp-ts/dist/commonjs/header-types.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/bmp-ts@1.0.9/node_modules/bmp-ts/dist/commonjs/index.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/bmp-ts@1.0.9/node_modules/bmp-ts/dist/commonjs/index.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.encode = exports.decode = void 0;\nconst decoder_js_1 = __importDefault(__webpack_require__(/*! ./decoder.js */ \"(ssr)/../../node_modules/.pnpm/bmp-ts@1.0.9/node_modules/bmp-ts/dist/commonjs/decoder.js\"));\nconst encoder_js_1 = __importDefault(__webpack_require__(/*! ./encoder.js */ \"(ssr)/../../node_modules/.pnpm/bmp-ts@1.0.9/node_modules/bmp-ts/dist/commonjs/encoder.js\"));\nfunction decode(bmpData, options) {\n    return new decoder_js_1.default(bmpData, options);\n}\nexports.decode = decode;\nfunction encode(imgData) {\n    return new encoder_js_1.default(imgData);\n}\nexports.encode = encode;\n__exportStar(__webpack_require__(/*! ./types.js */ \"(ssr)/../../node_modules/.pnpm/bmp-ts@1.0.9/node_modules/bmp-ts/dist/commonjs/types.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JtcC10c0AxLjAuOS9ub2RlX21vZHVsZXMvYm1wLXRzL2Rpc3QvY29tbW9uanMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjLEdBQUcsY0FBYztBQUMvQixxQ0FBcUMsbUJBQU8sQ0FBQyw4R0FBYztBQUMzRCxxQ0FBcUMsbUJBQU8sQ0FBQyw4R0FBYztBQUMzRDtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLGFBQWEsbUJBQU8sQ0FBQywwR0FBWTtBQUNqQyIsInNvdXJjZXMiOlsiL1VzZXJzL21pa2V3ZXN0aGFkL0Rlc2t0b3AvUmVwb3Mvc3BvcmFkaWMtbGFicy10aWxlLWV4dHJ1ZGVyL25vZGVfbW9kdWxlcy8ucG5wbS9ibXAtdHNAMS4wLjkvbm9kZV9tb2R1bGVzL2JtcC10cy9kaXN0L2NvbW1vbmpzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmVuY29kZSA9IGV4cG9ydHMuZGVjb2RlID0gdm9pZCAwO1xuY29uc3QgZGVjb2Rlcl9qc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2RlY29kZXIuanNcIikpO1xuY29uc3QgZW5jb2Rlcl9qc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2VuY29kZXIuanNcIikpO1xuZnVuY3Rpb24gZGVjb2RlKGJtcERhdGEsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IGRlY29kZXJfanNfMS5kZWZhdWx0KGJtcERhdGEsIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5kZWNvZGUgPSBkZWNvZGU7XG5mdW5jdGlvbiBlbmNvZGUoaW1nRGF0YSkge1xuICAgIHJldHVybiBuZXcgZW5jb2Rlcl9qc18xLmRlZmF1bHQoaW1nRGF0YSk7XG59XG5leHBvcnRzLmVuY29kZSA9IGVuY29kZTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlcy5qc1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/bmp-ts@1.0.9/node_modules/bmp-ts/dist/commonjs/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/bmp-ts@1.0.9/node_modules/bmp-ts/dist/commonjs/mask-color.js":
/*!*********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/bmp-ts@1.0.9/node_modules/bmp-ts/dist/commonjs/mask-color.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// We have these:\n//\n// const sample = 0101 0101 0101 0101\n// const mask   = 0111 1100 0000 0000\n// 256        === 0000 0001 0000 0000\n//\n// We want to take the sample and turn it into an 8-bit value.\n//\n// 1. We extract the last bit of the mask:\n//\n// 0000 0100 0000 0000\n//       ^\n//\n// Like so:\n//\n// const a = ~mask =    1000 0011 1111 1111\n// const b = a + 1 =    1000 0100 0000 0000\n// const c = b & mask = 0000 0100 0000 0000\n//\n// 2. We shift it to the right and extract the bit before the first:\n//\n// 0000 0000 0010 0000\n//             ^\n//\n// Like so:\n//\n// const d = mask / c = 0000 0000 0001 1111\n// const e = mask + 1 = 0000 0000 0010 0000\n//\n// 3. We apply the mask and the two values above to a sample:\n//\n// const f = sample & mask = 0101 0100 0000 0000\n// const g = f / c =         0000 0000 0001 0101\n// const h = 256 / e =       0000 0000 0000 0100\n// const i = g * h =         0000 0000 1010 1000\n//                                     ^^^^ ^\n//\n// Voila, we have extracted a sample and \"stretched\" it to 8 bits. For samples\n// which are already 8-bit, h === 1 and g === i.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nfunction maskColor(maskRed, maskGreen, maskBlue, maskAlpha) {\n    const maskRedR = (~maskRed + 1) & maskRed;\n    const maskGreenR = (~maskGreen + 1) & maskGreen;\n    const maskBlueR = (~maskBlue + 1) & maskBlue;\n    const maskAlphaR = (~maskAlpha + 1) & maskAlpha;\n    const shiftedMaskRedL = maskRed / maskRedR + 1;\n    const shiftedMaskGreenL = maskGreen / maskGreenR + 1;\n    const shiftedMaskBlueL = maskBlue / maskBlueR + 1;\n    const shiftedMaskAlphaL = maskAlpha / maskAlphaR + 1;\n    return {\n        shiftRed: (x) => (((x & maskRed) / maskRedR) * 0x100) / shiftedMaskRedL,\n        shiftGreen: (x) => (((x & maskGreen) / maskGreenR) * 0x100) / shiftedMaskGreenL,\n        shiftBlue: (x) => (((x & maskBlue) / maskBlueR) * 0x100) / shiftedMaskBlueL,\n        shiftAlpha: maskAlpha !== 0\n            ? (x) => (((x & maskAlpha) / maskAlphaR) * 0x100) / shiftedMaskAlphaL\n            : () => 255,\n    };\n}\nexports[\"default\"] = maskColor;\n//# sourceMappingURL=mask-color.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JtcC10c0AxLjAuOS9ub2RlX21vZHVsZXMvYm1wLXRzL2Rpc3QvY29tbW9uanMvbWFzay1jb2xvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvbWlrZXdlc3RoYWQvRGVza3RvcC9SZXBvcy9zcG9yYWRpYy1sYWJzLXRpbGUtZXh0cnVkZXIvbm9kZV9tb2R1bGVzLy5wbnBtL2JtcC10c0AxLjAuOS9ub2RlX21vZHVsZXMvYm1wLXRzL2Rpc3QvY29tbW9uanMvbWFzay1jb2xvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIFdlIGhhdmUgdGhlc2U6XG4vL1xuLy8gY29uc3Qgc2FtcGxlID0gMDEwMSAwMTAxIDAxMDEgMDEwMVxuLy8gY29uc3QgbWFzayAgID0gMDExMSAxMTAwIDAwMDAgMDAwMFxuLy8gMjU2ICAgICAgICA9PT0gMDAwMCAwMDAxIDAwMDAgMDAwMFxuLy9cbi8vIFdlIHdhbnQgdG8gdGFrZSB0aGUgc2FtcGxlIGFuZCB0dXJuIGl0IGludG8gYW4gOC1iaXQgdmFsdWUuXG4vL1xuLy8gMS4gV2UgZXh0cmFjdCB0aGUgbGFzdCBiaXQgb2YgdGhlIG1hc2s6XG4vL1xuLy8gMDAwMCAwMTAwIDAwMDAgMDAwMFxuLy8gICAgICAgXlxuLy9cbi8vIExpa2Ugc286XG4vL1xuLy8gY29uc3QgYSA9IH5tYXNrID0gICAgMTAwMCAwMDExIDExMTEgMTExMVxuLy8gY29uc3QgYiA9IGEgKyAxID0gICAgMTAwMCAwMTAwIDAwMDAgMDAwMFxuLy8gY29uc3QgYyA9IGIgJiBtYXNrID0gMDAwMCAwMTAwIDAwMDAgMDAwMFxuLy9cbi8vIDIuIFdlIHNoaWZ0IGl0IHRvIHRoZSByaWdodCBhbmQgZXh0cmFjdCB0aGUgYml0IGJlZm9yZSB0aGUgZmlyc3Q6XG4vL1xuLy8gMDAwMCAwMDAwIDAwMTAgMDAwMFxuLy8gICAgICAgICAgICAgXlxuLy9cbi8vIExpa2Ugc286XG4vL1xuLy8gY29uc3QgZCA9IG1hc2sgLyBjID0gMDAwMCAwMDAwIDAwMDEgMTExMVxuLy8gY29uc3QgZSA9IG1hc2sgKyAxID0gMDAwMCAwMDAwIDAwMTAgMDAwMFxuLy9cbi8vIDMuIFdlIGFwcGx5IHRoZSBtYXNrIGFuZCB0aGUgdHdvIHZhbHVlcyBhYm92ZSB0byBhIHNhbXBsZTpcbi8vXG4vLyBjb25zdCBmID0gc2FtcGxlICYgbWFzayA9IDAxMDEgMDEwMCAwMDAwIDAwMDBcbi8vIGNvbnN0IGcgPSBmIC8gYyA9ICAgICAgICAgMDAwMCAwMDAwIDAwMDEgMDEwMVxuLy8gY29uc3QgaCA9IDI1NiAvIGUgPSAgICAgICAwMDAwIDAwMDAgMDAwMCAwMTAwXG4vLyBjb25zdCBpID0gZyAqIGggPSAgICAgICAgIDAwMDAgMDAwMCAxMDEwIDEwMDBcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl4gXlxuLy9cbi8vIFZvaWxhLCB3ZSBoYXZlIGV4dHJhY3RlZCBhIHNhbXBsZSBhbmQgXCJzdHJldGNoZWRcIiBpdCB0byA4IGJpdHMuIEZvciBzYW1wbGVzXG4vLyB3aGljaCBhcmUgYWxyZWFkeSA4LWJpdCwgaCA9PT0gMSBhbmQgZyA9PT0gaS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIG1hc2tDb2xvcihtYXNrUmVkLCBtYXNrR3JlZW4sIG1hc2tCbHVlLCBtYXNrQWxwaGEpIHtcbiAgICBjb25zdCBtYXNrUmVkUiA9ICh+bWFza1JlZCArIDEpICYgbWFza1JlZDtcbiAgICBjb25zdCBtYXNrR3JlZW5SID0gKH5tYXNrR3JlZW4gKyAxKSAmIG1hc2tHcmVlbjtcbiAgICBjb25zdCBtYXNrQmx1ZVIgPSAofm1hc2tCbHVlICsgMSkgJiBtYXNrQmx1ZTtcbiAgICBjb25zdCBtYXNrQWxwaGFSID0gKH5tYXNrQWxwaGEgKyAxKSAmIG1hc2tBbHBoYTtcbiAgICBjb25zdCBzaGlmdGVkTWFza1JlZEwgPSBtYXNrUmVkIC8gbWFza1JlZFIgKyAxO1xuICAgIGNvbnN0IHNoaWZ0ZWRNYXNrR3JlZW5MID0gbWFza0dyZWVuIC8gbWFza0dyZWVuUiArIDE7XG4gICAgY29uc3Qgc2hpZnRlZE1hc2tCbHVlTCA9IG1hc2tCbHVlIC8gbWFza0JsdWVSICsgMTtcbiAgICBjb25zdCBzaGlmdGVkTWFza0FscGhhTCA9IG1hc2tBbHBoYSAvIG1hc2tBbHBoYVIgKyAxO1xuICAgIHJldHVybiB7XG4gICAgICAgIHNoaWZ0UmVkOiAoeCkgPT4gKCgoeCAmIG1hc2tSZWQpIC8gbWFza1JlZFIpICogMHgxMDApIC8gc2hpZnRlZE1hc2tSZWRMLFxuICAgICAgICBzaGlmdEdyZWVuOiAoeCkgPT4gKCgoeCAmIG1hc2tHcmVlbikgLyBtYXNrR3JlZW5SKSAqIDB4MTAwKSAvIHNoaWZ0ZWRNYXNrR3JlZW5MLFxuICAgICAgICBzaGlmdEJsdWU6ICh4KSA9PiAoKCh4ICYgbWFza0JsdWUpIC8gbWFza0JsdWVSKSAqIDB4MTAwKSAvIHNoaWZ0ZWRNYXNrQmx1ZUwsXG4gICAgICAgIHNoaWZ0QWxwaGE6IG1hc2tBbHBoYSAhPT0gMFxuICAgICAgICAgICAgPyAoeCkgPT4gKCgoeCAmIG1hc2tBbHBoYSkgLyBtYXNrQWxwaGFSKSAqIDB4MTAwKSAvIHNoaWZ0ZWRNYXNrQWxwaGFMXG4gICAgICAgICAgICA6ICgpID0+IDI1NSxcbiAgICB9O1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gbWFza0NvbG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFzay1jb2xvci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/bmp-ts@1.0.9/node_modules/bmp-ts/dist/commonjs/mask-color.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/bmp-ts@1.0.9/node_modules/bmp-ts/dist/commonjs/types.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/bmp-ts@1.0.9/node_modules/bmp-ts/dist/commonjs/types.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BmpCompression = void 0;\nvar BmpCompression;\n(function (BmpCompression) {\n    BmpCompression[BmpCompression[\"NONE\"] = 0] = \"NONE\";\n    BmpCompression[BmpCompression[\"BI_RLE8\"] = 1] = \"BI_RLE8\";\n    BmpCompression[BmpCompression[\"BI_RLE4\"] = 2] = \"BI_RLE4\";\n    BmpCompression[BmpCompression[\"BI_BIT_FIELDS\"] = 3] = \"BI_BIT_FIELDS\";\n    BmpCompression[BmpCompression[\"BI_ALPHA_BIT_FIELDS\"] = 6] = \"BI_ALPHA_BIT_FIELDS\";\n})(BmpCompression || (exports.BmpCompression = BmpCompression = {}));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JtcC10c0AxLjAuOS9ub2RlX21vZHVsZXMvYm1wLXRzL2Rpc3QvY29tbW9uanMvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxxQkFBcUIsc0JBQXNCLHNCQUFzQjtBQUNsRSIsInNvdXJjZXMiOlsiL1VzZXJzL21pa2V3ZXN0aGFkL0Rlc2t0b3AvUmVwb3Mvc3BvcmFkaWMtbGFicy10aWxlLWV4dHJ1ZGVyL25vZGVfbW9kdWxlcy8ucG5wbS9ibXAtdHNAMS4wLjkvbm9kZV9tb2R1bGVzL2JtcC10cy9kaXN0L2NvbW1vbmpzL3R5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5CbXBDb21wcmVzc2lvbiA9IHZvaWQgMDtcbnZhciBCbXBDb21wcmVzc2lvbjtcbihmdW5jdGlvbiAoQm1wQ29tcHJlc3Npb24pIHtcbiAgICBCbXBDb21wcmVzc2lvbltCbXBDb21wcmVzc2lvbltcIk5PTkVcIl0gPSAwXSA9IFwiTk9ORVwiO1xuICAgIEJtcENvbXByZXNzaW9uW0JtcENvbXByZXNzaW9uW1wiQklfUkxFOFwiXSA9IDFdID0gXCJCSV9STEU4XCI7XG4gICAgQm1wQ29tcHJlc3Npb25bQm1wQ29tcHJlc3Npb25bXCJCSV9STEU0XCJdID0gMl0gPSBcIkJJX1JMRTRcIjtcbiAgICBCbXBDb21wcmVzc2lvbltCbXBDb21wcmVzc2lvbltcIkJJX0JJVF9GSUVMRFNcIl0gPSAzXSA9IFwiQklfQklUX0ZJRUxEU1wiO1xuICAgIEJtcENvbXByZXNzaW9uW0JtcENvbXByZXNzaW9uW1wiQklfQUxQSEFfQklUX0ZJRUxEU1wiXSA9IDZdID0gXCJCSV9BTFBIQV9CSVRfRklFTERTXCI7XG59KShCbXBDb21wcmVzc2lvbiB8fCAoZXhwb3J0cy5CbXBDb21wcmVzc2lvbiA9IEJtcENvbXByZXNzaW9uID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/bmp-ts@1.0.9/node_modules/bmp-ts/dist/commonjs/types.js\n");

/***/ })

};
;