"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@jimp+plugin-blur@1.6.0";
exports.ids = ["vendor-chunks/@jimp+plugin-blur@1.6.0"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@jimp+plugin-blur@1.6.0/node_modules/@jimp/plugin-blur/dist/commonjs/blur-tables.js":
/*!********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@jimp+plugin-blur@1.6.0/node_modules/@jimp/plugin-blur/dist/commonjs/blur-tables.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.shgTable = exports.mulTable = void 0;\nexports.mulTable = [\n    1, 57, 41, 21, 203, 34, 97, 73, 227, 91, 149, 62, 105, 45, 39, 137, 241, 107,\n    3, 173, 39, 71, 65, 238, 219, 101, 187, 87, 81, 151, 141, 133, 249, 117, 221,\n    209, 197, 187, 177, 169, 5, 153, 73, 139, 133, 127, 243, 233, 223, 107, 103,\n    99, 191, 23, 177, 171, 165, 159, 77, 149, 9, 139, 135, 131, 253, 245, 119,\n    231, 224, 109, 211, 103, 25, 195, 189, 23, 45, 175, 171, 83, 81, 79, 155, 151,\n    147, 9, 141, 137, 67, 131, 129, 251, 123, 30, 235, 115, 113, 221, 217, 53, 13,\n    51, 50, 49, 193, 189, 185, 91, 179, 175, 43, 169, 83, 163, 5, 79, 155, 19, 75,\n    147, 145, 143, 35, 69, 17, 67, 33, 65, 255, 251, 247, 243, 239, 59, 29, 229,\n    113, 111, 219, 27, 213, 105, 207, 51, 201, 199, 49, 193, 191, 47, 93, 183,\n    181, 179, 11, 87, 43, 85, 167, 165, 163, 161, 159, 157, 155, 77, 19, 75, 37,\n    73, 145, 143, 141, 35, 138, 137, 135, 67, 33, 131, 129, 255, 63, 250, 247, 61,\n    121, 239, 237, 117, 29, 229, 227, 225, 111, 55, 109, 216, 213, 211, 209, 207,\n    205, 203, 201, 199, 197, 195, 193, 48, 190, 47, 93, 185, 183, 181, 179, 178,\n    176, 175, 173, 171, 85, 21, 167, 165, 41, 163, 161, 5, 79, 157, 78, 154, 153,\n    19, 75, 149, 74, 147, 73, 144, 143, 71, 141, 140, 139, 137, 17, 135, 134, 133,\n    66, 131, 65, 129, 1,\n];\nexports.shgTable = [\n    0, 9, 10, 10, 14, 12, 14, 14, 16, 15, 16, 15, 16, 15, 15, 17, 18, 17, 12, 18,\n    16, 17, 17, 19, 19, 18, 19, 18, 18, 19, 19, 19, 20, 19, 20, 20, 20, 20, 20,\n    20, 15, 20, 19, 20, 20, 20, 21, 21, 21, 20, 20, 20, 21, 18, 21, 21, 21, 21,\n    20, 21, 17, 21, 21, 21, 22, 22, 21, 22, 22, 21, 22, 21, 19, 22, 22, 19, 20,\n    22, 22, 21, 21, 21, 22, 22, 22, 18, 22, 22, 21, 22, 22, 23, 22, 20, 23, 22,\n    22, 23, 23, 21, 19, 21, 21, 21, 23, 23, 23, 22, 23, 23, 21, 23, 22, 23, 18,\n    22, 23, 20, 22, 23, 23, 23, 21, 22, 20, 22, 21, 22, 24, 24, 24, 24, 24, 22,\n    21, 24, 23, 23, 24, 21, 24, 23, 24, 22, 24, 24, 22, 24, 24, 22, 23, 24, 24,\n    24, 20, 23, 22, 23, 24, 24, 24, 24, 24, 24, 24, 23, 21, 23, 22, 23, 24, 24,\n    24, 22, 24, 24, 24, 23, 22, 24, 24, 25, 23, 25, 25, 23, 24, 25, 25, 24, 22,\n    25, 25, 25, 24, 23, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 23,\n    25, 23, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 22, 25, 25, 23, 25, 25,\n    20, 24, 25, 24, 25, 25, 22, 24, 25, 24, 25, 24, 25, 25, 24, 25, 25, 25, 25,\n    22, 25, 25, 25, 24, 25, 24, 25, 18,\n];\n//# sourceMappingURL=blur-tables.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BqaW1wK3BsdWdpbi1ibHVyQDEuNi4wL25vZGVfbW9kdWxlcy9AamltcC9wbHVnaW4tYmx1ci9kaXN0L2NvbW1vbmpzL2JsdXItdGFibGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQixHQUFHLGdCQUFnQjtBQUNuQyxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL21pa2V3ZXN0aGFkL0Rlc2t0b3AvUmVwb3Mvc3BvcmFkaWMtbGFicy10aWxlLWV4dHJ1ZGVyL25vZGVfbW9kdWxlcy8ucG5wbS9AamltcCtwbHVnaW4tYmx1ckAxLjYuMC9ub2RlX21vZHVsZXMvQGppbXAvcGx1Z2luLWJsdXIvZGlzdC9jb21tb25qcy9ibHVyLXRhYmxlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2hnVGFibGUgPSBleHBvcnRzLm11bFRhYmxlID0gdm9pZCAwO1xuZXhwb3J0cy5tdWxUYWJsZSA9IFtcbiAgICAxLCA1NywgNDEsIDIxLCAyMDMsIDM0LCA5NywgNzMsIDIyNywgOTEsIDE0OSwgNjIsIDEwNSwgNDUsIDM5LCAxMzcsIDI0MSwgMTA3LFxuICAgIDMsIDE3MywgMzksIDcxLCA2NSwgMjM4LCAyMTksIDEwMSwgMTg3LCA4NywgODEsIDE1MSwgMTQxLCAxMzMsIDI0OSwgMTE3LCAyMjEsXG4gICAgMjA5LCAxOTcsIDE4NywgMTc3LCAxNjksIDUsIDE1MywgNzMsIDEzOSwgMTMzLCAxMjcsIDI0MywgMjMzLCAyMjMsIDEwNywgMTAzLFxuICAgIDk5LCAxOTEsIDIzLCAxNzcsIDE3MSwgMTY1LCAxNTksIDc3LCAxNDksIDksIDEzOSwgMTM1LCAxMzEsIDI1MywgMjQ1LCAxMTksXG4gICAgMjMxLCAyMjQsIDEwOSwgMjExLCAxMDMsIDI1LCAxOTUsIDE4OSwgMjMsIDQ1LCAxNzUsIDE3MSwgODMsIDgxLCA3OSwgMTU1LCAxNTEsXG4gICAgMTQ3LCA5LCAxNDEsIDEzNywgNjcsIDEzMSwgMTI5LCAyNTEsIDEyMywgMzAsIDIzNSwgMTE1LCAxMTMsIDIyMSwgMjE3LCA1MywgMTMsXG4gICAgNTEsIDUwLCA0OSwgMTkzLCAxODksIDE4NSwgOTEsIDE3OSwgMTc1LCA0MywgMTY5LCA4MywgMTYzLCA1LCA3OSwgMTU1LCAxOSwgNzUsXG4gICAgMTQ3LCAxNDUsIDE0MywgMzUsIDY5LCAxNywgNjcsIDMzLCA2NSwgMjU1LCAyNTEsIDI0NywgMjQzLCAyMzksIDU5LCAyOSwgMjI5LFxuICAgIDExMywgMTExLCAyMTksIDI3LCAyMTMsIDEwNSwgMjA3LCA1MSwgMjAxLCAxOTksIDQ5LCAxOTMsIDE5MSwgNDcsIDkzLCAxODMsXG4gICAgMTgxLCAxNzksIDExLCA4NywgNDMsIDg1LCAxNjcsIDE2NSwgMTYzLCAxNjEsIDE1OSwgMTU3LCAxNTUsIDc3LCAxOSwgNzUsIDM3LFxuICAgIDczLCAxNDUsIDE0MywgMTQxLCAzNSwgMTM4LCAxMzcsIDEzNSwgNjcsIDMzLCAxMzEsIDEyOSwgMjU1LCA2MywgMjUwLCAyNDcsIDYxLFxuICAgIDEyMSwgMjM5LCAyMzcsIDExNywgMjksIDIyOSwgMjI3LCAyMjUsIDExMSwgNTUsIDEwOSwgMjE2LCAyMTMsIDIxMSwgMjA5LCAyMDcsXG4gICAgMjA1LCAyMDMsIDIwMSwgMTk5LCAxOTcsIDE5NSwgMTkzLCA0OCwgMTkwLCA0NywgOTMsIDE4NSwgMTgzLCAxODEsIDE3OSwgMTc4LFxuICAgIDE3NiwgMTc1LCAxNzMsIDE3MSwgODUsIDIxLCAxNjcsIDE2NSwgNDEsIDE2MywgMTYxLCA1LCA3OSwgMTU3LCA3OCwgMTU0LCAxNTMsXG4gICAgMTksIDc1LCAxNDksIDc0LCAxNDcsIDczLCAxNDQsIDE0MywgNzEsIDE0MSwgMTQwLCAxMzksIDEzNywgMTcsIDEzNSwgMTM0LCAxMzMsXG4gICAgNjYsIDEzMSwgNjUsIDEyOSwgMSxcbl07XG5leHBvcnRzLnNoZ1RhYmxlID0gW1xuICAgIDAsIDksIDEwLCAxMCwgMTQsIDEyLCAxNCwgMTQsIDE2LCAxNSwgMTYsIDE1LCAxNiwgMTUsIDE1LCAxNywgMTgsIDE3LCAxMiwgMTgsXG4gICAgMTYsIDE3LCAxNywgMTksIDE5LCAxOCwgMTksIDE4LCAxOCwgMTksIDE5LCAxOSwgMjAsIDE5LCAyMCwgMjAsIDIwLCAyMCwgMjAsXG4gICAgMjAsIDE1LCAyMCwgMTksIDIwLCAyMCwgMjAsIDIxLCAyMSwgMjEsIDIwLCAyMCwgMjAsIDIxLCAxOCwgMjEsIDIxLCAyMSwgMjEsXG4gICAgMjAsIDIxLCAxNywgMjEsIDIxLCAyMSwgMjIsIDIyLCAyMSwgMjIsIDIyLCAyMSwgMjIsIDIxLCAxOSwgMjIsIDIyLCAxOSwgMjAsXG4gICAgMjIsIDIyLCAyMSwgMjEsIDIxLCAyMiwgMjIsIDIyLCAxOCwgMjIsIDIyLCAyMSwgMjIsIDIyLCAyMywgMjIsIDIwLCAyMywgMjIsXG4gICAgMjIsIDIzLCAyMywgMjEsIDE5LCAyMSwgMjEsIDIxLCAyMywgMjMsIDIzLCAyMiwgMjMsIDIzLCAyMSwgMjMsIDIyLCAyMywgMTgsXG4gICAgMjIsIDIzLCAyMCwgMjIsIDIzLCAyMywgMjMsIDIxLCAyMiwgMjAsIDIyLCAyMSwgMjIsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjIsXG4gICAgMjEsIDI0LCAyMywgMjMsIDI0LCAyMSwgMjQsIDIzLCAyNCwgMjIsIDI0LCAyNCwgMjIsIDI0LCAyNCwgMjIsIDIzLCAyNCwgMjQsXG4gICAgMjQsIDIwLCAyMywgMjIsIDIzLCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjMsIDIxLCAyMywgMjIsIDIzLCAyNCwgMjQsXG4gICAgMjQsIDIyLCAyNCwgMjQsIDI0LCAyMywgMjIsIDI0LCAyNCwgMjUsIDIzLCAyNSwgMjUsIDIzLCAyNCwgMjUsIDI1LCAyNCwgMjIsXG4gICAgMjUsIDI1LCAyNSwgMjQsIDIzLCAyNCwgMjUsIDI1LCAyNSwgMjUsIDI1LCAyNSwgMjUsIDI1LCAyNSwgMjUsIDI1LCAyNSwgMjMsXG4gICAgMjUsIDIzLCAyNCwgMjUsIDI1LCAyNSwgMjUsIDI1LCAyNSwgMjUsIDI1LCAyNSwgMjQsIDIyLCAyNSwgMjUsIDIzLCAyNSwgMjUsXG4gICAgMjAsIDI0LCAyNSwgMjQsIDI1LCAyNSwgMjIsIDI0LCAyNSwgMjQsIDI1LCAyNCwgMjUsIDI1LCAyNCwgMjUsIDI1LCAyNSwgMjUsXG4gICAgMjIsIDI1LCAyNSwgMjUsIDI0LCAyNSwgMjQsIDI1LCAxOCxcbl07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ibHVyLXRhYmxlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@jimp+plugin-blur@1.6.0/node_modules/@jimp/plugin-blur/dist/commonjs/blur-tables.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@jimp+plugin-blur@1.6.0/node_modules/@jimp/plugin-blur/dist/commonjs/index.js":
/*!**************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@jimp+plugin-blur@1.6.0/node_modules/@jimp/plugin-blur/dist/commonjs/index.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.methods = void 0;\nconst blur_tables_js_1 = __webpack_require__(/*! ./blur-tables.js */ \"(ssr)/../../node_modules/.pnpm/@jimp+plugin-blur@1.6.0/node_modules/@jimp/plugin-blur/dist/commonjs/blur-tables.js\");\nconst utils_1 = __webpack_require__(/*! @jimp/utils */ \"(ssr)/../../node_modules/.pnpm/@jimp+utils@1.6.0/node_modules/@jimp/utils/dist/commonjs/index.js\");\n/*\n    Superfast Blur (0.5)\n    http://www.quasimondo.com/BoxBlurForCanvas/FastBlur.js\n\n    Copyright (c) 2011 Mario Klingemann\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation\n    files (the \"Software\"), to deal in the Software without\n    restriction, including without limitation the rights to use,\n    copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following\n    conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n    OTHER DEALINGS IN THE SOFTWARE.\n*/\nexports.methods = {\n    /**\n     * A fast blur algorithm that produces similar effect to a Gaussian blur - but MUCH quicker\n     * @param r the pixel radius of the blur\n     * @example\n     * ```ts\n     * import { Jimp } from \"jimp\";\n     *\n     * const image = await Jimp.read(\"test/image.png\");\n     *\n     * image.blur(5);\n     * ```\n     */\n    blur(image, r) {\n        if (typeof r !== \"number\") {\n            throw new Error(\"r must be a number\");\n        }\n        if (r < 1) {\n            throw new Error(\"r must be greater than 0\");\n        }\n        let rsum;\n        let gsum;\n        let bsum;\n        let asum;\n        let x;\n        let y;\n        let i;\n        let p;\n        let p1;\n        let p2;\n        let yp;\n        let yi;\n        let yw;\n        const wm = image.bitmap.width - 1;\n        const hm = image.bitmap.height - 1;\n        // const wh = image.bitmap.width * image.bitmap.height;\n        const rad1 = r + 1;\n        const mulSum = blur_tables_js_1.mulTable[r];\n        const shgSum = blur_tables_js_1.shgTable[r];\n        const red = [];\n        const green = [];\n        const blue = [];\n        const alpha = [];\n        const vmin = [];\n        const vmax = [];\n        let iterations = 2;\n        while (iterations-- > 0) {\n            yi = 0;\n            yw = 0;\n            for (y = 0; y < image.bitmap.height; y++) {\n                rsum = image.bitmap.data[yw] * rad1;\n                gsum = image.bitmap.data[yw + 1] * rad1;\n                bsum = image.bitmap.data[yw + 2] * rad1;\n                asum = image.bitmap.data[yw + 3] * rad1;\n                for (i = 1; i <= r; i++) {\n                    p = yw + ((i > wm ? wm : i) << 2);\n                    rsum += image.bitmap.data[p++];\n                    gsum += image.bitmap.data[p++];\n                    bsum += image.bitmap.data[p++];\n                    asum += image.bitmap.data[p];\n                }\n                for (x = 0; x < image.bitmap.width; x++) {\n                    red[yi] = rsum;\n                    green[yi] = gsum;\n                    blue[yi] = bsum;\n                    alpha[yi] = asum;\n                    if (y === 0) {\n                        vmin[x] = ((p = x + rad1) < wm ? p : wm) << 2;\n                        vmax[x] = (p = x - r) > 0 ? p << 2 : 0;\n                    }\n                    p1 = yw + vmin[x];\n                    p2 = yw + vmax[x];\n                    rsum += image.bitmap.data[p1++] - image.bitmap.data[p2++];\n                    gsum += image.bitmap.data[p1++] - image.bitmap.data[p2++];\n                    bsum += image.bitmap.data[p1++] - image.bitmap.data[p2++];\n                    asum += image.bitmap.data[p1] - image.bitmap.data[p2++];\n                    yi++;\n                }\n                yw += image.bitmap.width << 2;\n            }\n            for (x = 0; x < image.bitmap.width; x++) {\n                yp = x;\n                rsum = red[yp] * rad1;\n                gsum = green[yp] * rad1;\n                bsum = blue[yp] * rad1;\n                asum = alpha[yp] * rad1;\n                for (i = 1; i <= r; i++) {\n                    yp += i > hm ? 0 : image.bitmap.width;\n                    rsum += red[yp];\n                    gsum += green[yp];\n                    bsum += blue[yp];\n                    asum += alpha[yp];\n                }\n                yi = x << 2;\n                for (y = 0; y < image.bitmap.height; y++) {\n                    image.bitmap.data[yi] = (0, utils_1.limit255)((rsum * mulSum) >>> shgSum);\n                    image.bitmap.data[yi + 1] = (0, utils_1.limit255)((gsum * mulSum) >>> shgSum);\n                    image.bitmap.data[yi + 2] = (0, utils_1.limit255)((bsum * mulSum) >>> shgSum);\n                    image.bitmap.data[yi + 3] = (0, utils_1.limit255)((asum * mulSum) >>> shgSum);\n                    if (x === 0) {\n                        vmin[y] = ((p = y + rad1) < hm ? p : hm) * image.bitmap.width;\n                        vmax[y] = (p = y - r) > 0 ? p * image.bitmap.width : 0;\n                    }\n                    p1 = x + vmin[y];\n                    p2 = x + vmax[y];\n                    rsum += red[p1] - red[p2];\n                    gsum += green[p1] - green[p2];\n                    bsum += blue[p1] - blue[p2];\n                    asum += alpha[p1] - alpha[p2];\n                    yi += image.bitmap.width << 2;\n                }\n            }\n        }\n        return image;\n    },\n    // http://blog.ivank.net/fastest-gaussian-blur.html\n    /**\n     * Applies a true Gaussian blur to the image (warning: this is VERY slow)\n     * @param r the pixel radius of the blur\n     * @example\n     * ```ts\n     * import { Jimp } from \"jimp\";\n     *\n     * const image = await Jimp.read(\"test/image.png\");\n     *\n     * image.gaussian(15);\n     * ```\n     */\n    gaussian(image, r) {\n        if (typeof r !== \"number\") {\n            throw new Error(\"r must be a number\");\n        }\n        if (r < 1) {\n            throw new Error(\"r must be greater than 0\");\n        }\n        const rs = Math.ceil(r * 2.57); // significant radius\n        const range = rs * 2 + 1;\n        const rr2 = r * r * 2;\n        const rr2pi = rr2 * Math.PI;\n        const weights = [];\n        for (let y = 0; y < range; y++) {\n            const weightsRow = [];\n            for (let x = 0; x < range; x++) {\n                const dsq = (x - rs) ** 2 + (y - rs) ** 2;\n                weightsRow[x] = Math.exp(-dsq / rr2) / rr2pi;\n            }\n            weights.push(weightsRow);\n        }\n        for (let y = 0; y < image.bitmap.height; y++) {\n            for (let x = 0; x < image.bitmap.width; x++) {\n                let red = 0;\n                let green = 0;\n                let blue = 0;\n                let alpha = 0;\n                let wsum = 0;\n                for (let iy = 0; iy < range; iy++) {\n                    for (let ix = 0; ix < range; ix++) {\n                        const x1 = Math.min(image.bitmap.width - 1, Math.max(0, ix + x - rs));\n                        const y1 = Math.min(image.bitmap.height - 1, Math.max(0, iy + y - rs));\n                        const weight = weights[iy][ix];\n                        const idx = (y1 * image.bitmap.width + x1) << 2;\n                        red += image.bitmap.data[idx] * weight;\n                        green += image.bitmap.data[idx + 1] * weight;\n                        blue += image.bitmap.data[idx + 2] * weight;\n                        alpha += image.bitmap.data[idx + 3] * weight;\n                        wsum += weight;\n                    }\n                    const idx = (y * image.bitmap.width + x) << 2;\n                    image.bitmap.data[idx] = Math.round(red / wsum);\n                    image.bitmap.data[idx + 1] = Math.round(green / wsum);\n                    image.bitmap.data[idx + 2] = Math.round(blue / wsum);\n                    image.bitmap.data[idx + 3] = Math.round(alpha / wsum);\n                }\n            }\n        }\n        return image;\n    },\n};\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@jimp+plugin-blur@1.6.0/node_modules/@jimp/plugin-blur/dist/commonjs/index.js\n");

/***/ })

};
;