"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@jimp+plugin-color@1.6.0";
exports.ids = ["vendor-chunks/@jimp+plugin-color@1.6.0"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@jimp+plugin-color@1.6.0/node_modules/@jimp/plugin-color/dist/commonjs/index.js":
/*!****************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@jimp+plugin-color@1.6.0/node_modules/@jimp/plugin-color/dist/commonjs/index.js ***!
  \****************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.methods = exports.ColorActionName = void 0;\nconst tinycolor2_1 = __importDefault(__webpack_require__(/*! tinycolor2 */ \"(ssr)/../../node_modules/.pnpm/tinycolor2@1.6.0/node_modules/tinycolor2/cjs/tinycolor.js\"));\nconst utils_1 = __webpack_require__(/*! @jimp/utils */ \"(ssr)/../../node_modules/.pnpm/@jimp+utils@1.6.0/node_modules/@jimp/utils/dist/commonjs/index.js\");\nconst types_1 = __webpack_require__(/*! @jimp/types */ \"(ssr)/../../node_modules/.pnpm/@jimp+types@1.6.0/node_modules/@jimp/types/dist/commonjs/index.js\");\nconst zod_1 = __webpack_require__(/*! zod */ \"(ssr)/../../node_modules/.pnpm/zod@3.24.1/node_modules/zod/lib/index.js\");\nconst ConvolutionMatrixSchema = zod_1.z.array(zod_1.z.number()).min(1).array();\nconst ConvolutionComplexOptionsSchema = zod_1.z.object({\n    /** a matrix to weight the neighbors sum */\n    kernel: ConvolutionMatrixSchema,\n    /**define how to sum pixels from outside the border */\n    edgeHandling: zod_1.z.nativeEnum(types_1.Edge).optional(),\n});\nconst ConvolutionOptionsSchema = zod_1.z.union([\n    ConvolutionMatrixSchema,\n    ConvolutionComplexOptionsSchema,\n]);\nconst ConvoluteComplexOptionsSchema = zod_1.z.object({\n    /** the convolution kernel */\n    kernel: ConvolutionMatrixSchema,\n    /** the x position of the region to apply convolution to */\n    x: zod_1.z.number().optional(),\n    /** the y position of the region to apply convolution to */\n    y: zod_1.z.number().optional(),\n    /** the width of the region to apply convolution to */\n    w: zod_1.z.number().optional(),\n    /** the height of the region to apply convolution to */\n    h: zod_1.z.number().optional(),\n});\nconst ConvoluteOptionsSchema = zod_1.z.union([\n    ConvolutionMatrixSchema,\n    ConvoluteComplexOptionsSchema,\n]);\nconst PixelateSize = zod_1.z.number().min(1).max(Infinity);\nconst PixelateComplexOptionsSchema = zod_1.z.object({\n    /** the size of the pixels */\n    size: PixelateSize,\n    /** the x position of the region to pixelate */\n    x: zod_1.z.number().optional(),\n    /** the y position of the region to pixelate */\n    y: zod_1.z.number().optional(),\n    /** the width of the region to pixelate */\n    w: zod_1.z.number().optional(),\n    /** the height of the region to pixelate */\n    h: zod_1.z.number().optional(),\n});\nconst PixelateOptionsSchema = zod_1.z.union([\n    PixelateSize,\n    PixelateComplexOptionsSchema,\n]);\nfunction applyKernel(image, kernel, x, y) {\n    const value = [0, 0, 0, 0];\n    const size = (kernel.length - 1) / 2;\n    for (let kx = 0; kx < kernel.length; kx += 1) {\n        for (let ky = 0; ky < kernel[kx].length; ky += 1) {\n            const idx = image.getPixelIndex(x + kx - size, y + ky - size);\n            value[0] += image.bitmap.data[idx] * kernel[kx][ky];\n            value[1] += image.bitmap.data[idx + 1] * kernel[kx][ky];\n            value[2] += image.bitmap.data[idx + 2] * kernel[kx][ky];\n            value[3] += image.bitmap.data[idx + 3] * kernel[kx][ky];\n        }\n    }\n    return value;\n}\nfunction mix(clr, clr2, p = 50) {\n    return {\n        r: (clr2.r - clr.r) * (p / 100) + clr.r,\n        g: (clr2.g - clr.g) * (p / 100) + clr.g,\n        b: (clr2.b - clr.b) * (p / 100) + clr.b,\n    };\n}\nconst HueActionSchema = zod_1.z.object({\n    apply: zod_1.z.literal(\"hue\"),\n    params: zod_1.z.tuple([zod_1.z.number().min(-360).max(360)]),\n});\nconst SpinActionSchema = zod_1.z.object({\n    apply: zod_1.z.literal(\"spin\"),\n    params: zod_1.z.tuple([zod_1.z.number().min(-360).max(360)]),\n});\nconst LightenActionSchema = zod_1.z.object({\n    apply: zod_1.z.literal(\"lighten\"),\n    params: zod_1.z.tuple([zod_1.z.number().min(0).max(100)]).optional(),\n});\nconst RGBColorSchema = zod_1.z.object({\n    r: zod_1.z.number().min(0).max(255),\n    g: zod_1.z.number().min(0).max(255),\n    b: zod_1.z.number().min(0).max(255),\n});\nconst MixActionSchema = zod_1.z.object({\n    apply: zod_1.z.literal(\"mix\"),\n    params: zod_1.z.union([\n        zod_1.z.tuple([RGBColorSchema]),\n        zod_1.z.tuple([RGBColorSchema, zod_1.z.number().min(0).max(100)]),\n    ]),\n});\nconst TintActionSchema = zod_1.z.object({\n    apply: zod_1.z.literal(\"tint\"),\n    params: zod_1.z.tuple([zod_1.z.number().min(0).max(100)]).optional(),\n});\nconst ShadeActionSchema = zod_1.z.object({\n    apply: zod_1.z.literal(\"shade\"),\n    params: zod_1.z.tuple([zod_1.z.number().min(0).max(100)]).optional(),\n});\nconst XorActionSchema = zod_1.z.object({\n    apply: zod_1.z.literal(\"xor\"),\n    params: zod_1.z.tuple([RGBColorSchema]),\n});\nconst RedActionSchema = zod_1.z.object({\n    apply: zod_1.z.literal(\"red\"),\n    params: zod_1.z.tuple([zod_1.z.number().min(-255).max(255)]),\n});\nconst GreenActionSchema = zod_1.z.object({\n    apply: zod_1.z.literal(\"green\"),\n    params: zod_1.z.tuple([zod_1.z.number().min(-255).max(255)]),\n});\nconst BlueActionSchema = zod_1.z.object({\n    apply: zod_1.z.literal(\"blue\"),\n    params: zod_1.z.tuple([zod_1.z.number().min(-255).max(255)]),\n});\nconst BrightenActionSchema = zod_1.z.object({\n    apply: zod_1.z.literal(\"brighten\"),\n    params: zod_1.z.tuple([zod_1.z.number().min(0).max(100)]).optional(),\n});\nconst DarkenActionSchema = zod_1.z.object({\n    apply: zod_1.z.literal(\"darken\"),\n    params: zod_1.z.tuple([zod_1.z.number().min(0).max(100)]).optional(),\n});\nconst DesaturateActionSchema = zod_1.z.object({\n    apply: zod_1.z.literal(\"desaturate\"),\n    params: zod_1.z.tuple([zod_1.z.number().min(0).max(100)]).optional(),\n});\nconst SaturateActionSchema = zod_1.z.object({\n    apply: zod_1.z.literal(\"saturate\"),\n    params: zod_1.z.tuple([zod_1.z.number().min(0).max(100)]).optional(),\n});\nconst GrayscaleActionSchema = zod_1.z.object({\n    apply: zod_1.z.literal(\"greyscale\"),\n    params: zod_1.z.tuple([]).optional(),\n});\nconst ColorActionNameSchema = zod_1.z.union([\n    HueActionSchema,\n    SpinActionSchema,\n    LightenActionSchema,\n    MixActionSchema,\n    TintActionSchema,\n    ShadeActionSchema,\n    XorActionSchema,\n    RedActionSchema,\n    GreenActionSchema,\n    BlueActionSchema,\n    BrightenActionSchema,\n    DarkenActionSchema,\n    DesaturateActionSchema,\n    SaturateActionSchema,\n    GrayscaleActionSchema,\n]);\nexports.ColorActionName = Object.freeze({\n    LIGHTEN: \"lighten\",\n    BRIGHTEN: \"brighten\",\n    DARKEN: \"darken\",\n    DESATURATE: \"desaturate\",\n    SATURATE: \"saturate\",\n    GREYSCALE: \"greyscale\",\n    SPIN: \"spin\",\n    HUE: \"hue\",\n    MIX: \"mix\",\n    TINT: \"tint\",\n    SHADE: \"shade\",\n    XOR: \"xor\",\n    RED: \"red\",\n    GREEN: \"green\",\n    BLUE: \"blue\",\n});\n/**\n * Get an image's histogram\n * @return An object with an array of color occurrence counts for each channel (r,g,b)\n */\nfunction histogram(image) {\n    const histogram = {\n        r: new Array(256).fill(0),\n        g: new Array(256).fill(0),\n        b: new Array(256).fill(0),\n    };\n    image.scan((_, __, index) => {\n        histogram.r[image.bitmap.data[index + 0]]++;\n        histogram.g[image.bitmap.data[index + 1]]++;\n        histogram.b[image.bitmap.data[index + 2]]++;\n    });\n    return histogram;\n}\n/**\n * Normalize values\n * @param  value Pixel channel value.\n * @param  min   Minimum value for channel\n * @param  max   Maximum value for channel\n */\nconst normalizeValue = function (value, min, max) {\n    return ((value - min) * 255) / (max - min);\n};\nconst getBounds = function (histogramChannel) {\n    return [\n        histogramChannel.findIndex((value) => value > 0),\n        255 -\n            histogramChannel\n                .slice()\n                .reverse()\n                .findIndex((value) => value > 0),\n    ];\n};\nexports.methods = {\n    /**\n     * Normalizes the image.\n     * @example\n     * ```ts\n     * import { Jimp } from \"jimp\";\n     *\n     * const image = await Jimp.read(\"test/image.png\");\n     *\n     * image.normalize();\n     * ```\n     */\n    normalize(image) {\n        const h = histogram(image);\n        // store bounds (minimum and maximum values)\n        const bounds = {\n            r: getBounds(h.r),\n            g: getBounds(h.g),\n            b: getBounds(h.b),\n        };\n        // apply value transformations\n        image.scan((_, __, idx) => {\n            const r = image.bitmap.data[idx + 0];\n            const g = image.bitmap.data[idx + 1];\n            const b = image.bitmap.data[idx + 2];\n            image.bitmap.data[idx + 0] = normalizeValue(r, bounds.r[0], bounds.r[1]);\n            image.bitmap.data[idx + 1] = normalizeValue(g, bounds.g[0], bounds.g[1]);\n            image.bitmap.data[idx + 2] = normalizeValue(b, bounds.b[0], bounds.b[1]);\n        });\n        return image;\n    },\n    /**\n     * Inverts the colors in the image.\n     * @example\n     * ```ts\n     * import { Jimp } from \"jimp\";\n     *\n     * const image = await Jimp.read(\"test/image.png\");\n     *\n     * image.invert();\n     * ```\n     */\n    invert(image) {\n        image.scan((_, __, idx) => {\n            image.bitmap.data[idx] = 255 - image.bitmap.data[idx];\n            image.bitmap.data[idx + 1] = 255 - image.bitmap.data[idx + 1];\n            image.bitmap.data[idx + 2] = 255 - image.bitmap.data[idx + 2];\n        });\n        return image;\n    },\n    /**\n     * Adjusts the brightness of the image\n     * @param val the amount to adjust the brightness.\n     * @example\n     * ```ts\n     * import { Jimp } from \"jimp\";\n     *\n     * const image = await Jimp.read(\"test/image.png\");\n     *\n     * image.brightness(0.5);\n     * ```\n     */\n    brightness(image, val) {\n        if (typeof val !== \"number\") {\n            throw new Error(\"val must be numbers\");\n        }\n        image.scan((_, __, idx) => {\n            image.bitmap.data[idx] = (0, utils_1.limit255)(image.bitmap.data[idx] * val);\n            image.bitmap.data[idx + 1] = (0, utils_1.limit255)(image.bitmap.data[idx + 1] * val);\n            image.bitmap.data[idx + 2] = (0, utils_1.limit255)(image.bitmap.data[idx + 2] * val);\n        });\n        return image;\n    },\n    /**\n     * Adjusts the contrast of the image\n     * @param val the amount to adjust the contrast, a number between -1 and +1\n     * @example\n     * ```ts\n     * import { Jimp } from \"jimp\";\n     *\n     * const image = await Jimp.read(\"test/image.png\");\n     *\n     * image.contrast(0.75);\n     * ```\n     */\n    contrast(image, val) {\n        if (typeof val !== \"number\") {\n            throw new Error(\"val must be numbers\");\n        }\n        if (val < -1 || val > +1) {\n            throw new Error(\"val must be a number between -1 and +1\");\n        }\n        const factor = (val + 1) / (1 - val);\n        function adjust(value) {\n            value = Math.floor(factor * (value - 127) + 127);\n            return value < 0 ? 0 : value > 255 ? 255 : value;\n        }\n        image.scan((_, __, idx) => {\n            image.bitmap.data[idx] = adjust(image.bitmap.data[idx]);\n            image.bitmap.data[idx + 1] = adjust(image.bitmap.data[idx + 1]);\n            image.bitmap.data[idx + 2] = adjust(image.bitmap.data[idx + 2]);\n        });\n        return image;\n    },\n    /**\n     * Apply a posterize effect\n     * @param  n the amount to adjust the contrast, minimum threshold is two\n     * @example\n     * ```ts\n     * import { Jimp } from \"jimp\";\n     *\n     * const image = await Jimp.read(\"test/image.png\");\n     *\n     * image.posterize(5);\n     * ```\n     */\n    posterize(image, n) {\n        if (typeof n !== \"number\") {\n            throw new Error(\"n must be numbers\");\n        }\n        // minimum of 2 levels\n        if (n < 2) {\n            n = 2;\n        }\n        image.scan((_, __, idx) => {\n            const r = image.bitmap.data[idx];\n            const g = image.bitmap.data[idx + 1];\n            const b = image.bitmap.data[idx + 2];\n            image.bitmap.data[idx] =\n                (Math.floor((r / 255) * (n - 1)) / (n - 1)) * 255;\n            image.bitmap.data[idx + 1] =\n                (Math.floor((g / 255) * (n - 1)) / (n - 1)) * 255;\n            image.bitmap.data[idx + 2] =\n                (Math.floor((b / 255) * (n - 1)) / (n - 1)) * 255;\n        });\n        return image;\n    },\n    /**\n     * Removes colour from the image using ITU Rec 709 luminance values\n     * @example\n     * ```ts\n     * import { Jimp } from \"jimp\";\n     *\n     * const image = await Jimp.read(\"test/image.png\");\n     *\n     * image.greyscale();\n     * ```\n     */\n    greyscale(image) {\n        image.scan((_, __, idx) => {\n            // const grey = parseInt(\n            //   0.2126 * image.bitmap.data[idx]! +\n            //     0.7152 * image.bitmap.data[idx + 1]! +\n            //     0.0722 * image.bitmap.data[idx + 2]!,\n            //   10\n            // );\n            const grey = 0.2126 * image.bitmap.data[idx] +\n                0.7152 * image.bitmap.data[idx + 1] +\n                0.0722 * image.bitmap.data[idx + 2];\n            image.bitmap.data[idx] = grey;\n            image.bitmap.data[idx + 1] = grey;\n            image.bitmap.data[idx + 2] = grey;\n        });\n        return image;\n    },\n    /**\n     * Multiplies the opacity of each pixel by a factor between 0 and 1\n     * @param f A number, the factor by which to multiply the opacity of each pixel\n     * @example\n     * ```ts\n     * import { Jimp } from \"jimp\";\n     *\n     * const image = await Jimp.read(\"test/image.png\");\n     *\n     * image.opacity(0.5);\n     * ```\n     */\n    opacity(image, f) {\n        if (typeof f !== \"number\") {\n            throw new Error(\"f must be a number\");\n        }\n        if (f < 0 || f > 1) {\n            throw new Error(\"f must be a number from 0 to 1\");\n        }\n        image.scan((_, __, idx) => {\n            const v = image.bitmap.data[idx + 3] * f;\n            image.bitmap.data[idx + 3] = v;\n        });\n        return image;\n    },\n    /**\n     * Applies a sepia tone to the image.\n     * @example\n     * ```ts\n     * import { Jimp } from \"jimp\";\n     *\n     * const image = await Jimp.read(\"test/image.png\");\n     *\n     * image.sepia();\n     * ```\n     */\n    sepia(image) {\n        image.scan((_, __, idx) => {\n            let red = image.bitmap.data[idx];\n            let green = image.bitmap.data[idx + 1];\n            let blue = image.bitmap.data[idx + 2];\n            red = red * 0.393 + green * 0.769 + blue * 0.189;\n            green = red * 0.349 + green * 0.686 + blue * 0.168;\n            blue = red * 0.272 + green * 0.534 + blue * 0.131;\n            image.bitmap.data[idx] = red < 255 ? red : 255;\n            image.bitmap.data[idx + 1] = green < 255 ? green : 255;\n            image.bitmap.data[idx + 2] = blue < 255 ? blue : 255;\n        });\n        return image;\n    },\n    /**\n     * Fades each pixel by a factor between 0 and 1\n     * @param f A number from 0 to 1. 0 will haven no effect. 1 will turn the image completely transparent.\n     * @example\n     * ```ts\n     * import { Jimp } from \"jimp\";\n     *\n     * const image = await Jimp.read(\"test/image.png\");\n     *\n     * image.fade(0.7);\n     * ```\n     */\n    fade(image, f) {\n        if (typeof f !== \"number\") {\n            throw new Error(\"f must be a number\");\n        }\n        if (f < 0 || f > 1) {\n            throw new Error(\"f must be a number from 0 to 1\");\n        }\n        // this method is an alternative to opacity (which may be deprecated)\n        return this.opacity(image, 1 - f);\n    },\n    /**\n     * Adds each element of the image to its local neighbors, weighted by the kernel\n     * @example\n     * ```ts\n     * import { Jimp } from \"jimp\";\n     *\n     * const image = await Jimp.read(\"test/image.png\");\n     *\n     * image.convolute([\n     *   [-1, -1, 0],\n     *   [-1, 1, 1],\n     *   [0, 1, 1],\n     * ]);\n     * ```\n     */\n    convolution(image, options) {\n        const parsed = ConvolutionOptionsSchema.parse(options);\n        const { kernel, edgeHandling = types_1.Edge.EXTEND } = \"kernel\" in parsed ? parsed : { kernel: parsed, edgeHandling: undefined };\n        if (!kernel[0]) {\n            throw new Error(\"kernel must be a matrix\");\n        }\n        const newData = Buffer.from(image.bitmap.data);\n        const kRows = kernel.length;\n        const kCols = kernel[0].length;\n        const rowEnd = Math.floor(kRows / 2);\n        const colEnd = Math.floor(kCols / 2);\n        const rowIni = -rowEnd;\n        const colIni = -colEnd;\n        let weight;\n        let rSum;\n        let gSum;\n        let bSum;\n        let ri;\n        let gi;\n        let bi;\n        let xi;\n        let yi;\n        let idxi;\n        image.scan((x, y, idx) => {\n            bSum = 0;\n            gSum = 0;\n            rSum = 0;\n            for (let row = rowIni; row <= rowEnd; row++) {\n                for (let col = colIni; col <= colEnd; col++) {\n                    xi = x + col;\n                    yi = y + row;\n                    weight = kernel[row + rowEnd][col + colEnd];\n                    idxi = image.getPixelIndex(xi, yi, edgeHandling);\n                    if (idxi === -1) {\n                        bi = 0;\n                        gi = 0;\n                        ri = 0;\n                    }\n                    else {\n                        ri = image.bitmap.data[idxi + 0];\n                        gi = image.bitmap.data[idxi + 1];\n                        bi = image.bitmap.data[idxi + 2];\n                    }\n                    rSum += weight * ri;\n                    gSum += weight * gi;\n                    bSum += weight * bi;\n                }\n            }\n            if (rSum < 0) {\n                rSum = 0;\n            }\n            if (gSum < 0) {\n                gSum = 0;\n            }\n            if (bSum < 0) {\n                bSum = 0;\n            }\n            if (rSum > 255) {\n                rSum = 255;\n            }\n            if (gSum > 255) {\n                gSum = 255;\n            }\n            if (bSum > 255) {\n                bSum = 255;\n            }\n            newData[idx + 0] = rSum;\n            newData[idx + 1] = gSum;\n            newData[idx + 2] = bSum;\n        });\n        image.bitmap.data = newData;\n        return image;\n    },\n    /**\n     * Set the alpha channel on every pixel to fully opaque.\n     * @example\n     * ```ts\n     * import { Jimp } from \"jimp\";\n     *\n     * const image = await Jimp.read(\"test/image.png\");\n     *\n     * image.opaque();\n     * ```\n     */\n    opaque(image) {\n        image.scan((_, __, idx) => {\n            image.bitmap.data[idx + 3] = 255;\n        });\n        return image;\n    },\n    /**\n     * Pixelates the image or a region\n     * @example\n     * ```ts\n     * import { Jimp } from \"jimp\";\n     *\n     * const image = await Jimp.read(\"test/image.png\");\n     *\n     * // pixelate the whole image\n     * image.pixelate(10);\n     *\n     * // pixelate a region\n     * image.pixelate(10, 10, 10, 20, 20);\n     * ```\n     */\n    pixelate(image, options) {\n        const parsed = PixelateOptionsSchema.parse(options);\n        const { size, x = 0, y = 0, w = image.bitmap.width - x, h = image.bitmap.height - y, } = typeof parsed === \"number\"\n            ? { size: parsed }\n            : parsed;\n        const kernel = [\n            [1 / 16, 2 / 16, 1 / 16],\n            [2 / 16, 4 / 16, 2 / 16],\n            [1 / 16, 2 / 16, 1 / 16],\n        ];\n        const source = (0, utils_1.clone)(image);\n        (0, utils_1.scan)(source, x, y, w, h, (xx, yx, idx) => {\n            xx = size * Math.floor(xx / size);\n            yx = size * Math.floor(yx / size);\n            const value = applyKernel(source, kernel, xx, yx);\n            image.bitmap.data[idx] = value[0];\n            image.bitmap.data[idx + 1] = value[1];\n            image.bitmap.data[idx + 2] = value[2];\n            image.bitmap.data[idx + 3] = value[3];\n        });\n        return image;\n    },\n    /**\n     * Applies a convolution kernel to the image or a region\n     * @example\n     * ```ts\n     * import { Jimp } from \"jimp\";\n     *\n     * const image = await Jimp.read(\"test/image.png\");\n     *\n     * // apply a convolution kernel to the whole image\n     * image.convolution([\n     *   [-1, -1, 0],\n     *   [-1, 1, 1],\n     *   [0, 1, 1],\n     * ]);\n     *\n     * // apply a convolution kernel to a region\n     * image.convolution([\n     *   [-1, -1, 0],\n     *   [-1, 1, 1],\n     *   [0, 1, 1],\n     * ], 10, 10, 10, 20);\n     * ```\n     */\n    convolute(image, options) {\n        const parsed = ConvoluteOptionsSchema.parse(options);\n        const { kernel, x = 0, y = 0, w = image.bitmap.width - x, h = image.bitmap.height - y, } = \"kernel\" in parsed\n            ? parsed\n            : { kernel: parsed };\n        const source = (0, utils_1.clone)(image);\n        (0, utils_1.scan)(source, x, y, w, h, (xx, yx, idx) => {\n            const value = applyKernel(source, kernel, xx, yx);\n            image.bitmap.data[idx] = (0, utils_1.limit255)(value[0]);\n            image.bitmap.data[idx + 1] = (0, utils_1.limit255)(value[1]);\n            image.bitmap.data[idx + 2] = (0, utils_1.limit255)(value[2]);\n            image.bitmap.data[idx + 3] = (0, utils_1.limit255)(value[3]);\n        });\n        return image;\n    },\n    /**\n     * Apply multiple color modification rules\n     * @param  actions list of color modification rules, in following format: { apply: '<rule-name>', params: [ <rule-parameters> ]  }\n     * @example\n     * ```ts\n     * import { Jimp } from \"jimp\";\n     *\n     * const image = await Jimp.read(\"test/image.png\");\n     *\n     * image.color([\n     *   { apply: \"hue\", params: [-90] },\n     *   { apply: \"lighten\", params: [50] },\n     *   { apply: \"xor\", params: [\"#06D\"] },\n     * ]);\n     * ```\n     */\n    color(image, actions) {\n        if (!actions || !Array.isArray(actions)) {\n            throw new Error(\"actions must be an array\");\n        }\n        actions.forEach((action) => ColorActionNameSchema.parse(action));\n        actions = actions.map((action) => {\n            if (action.apply === \"xor\" || action.apply === \"mix\") {\n                action.params[0] = (0, tinycolor2_1.default)(action.params[0]).toRgb();\n            }\n            return action;\n        });\n        image.scan((_, __, idx) => {\n            let clr = {\n                r: image.bitmap.data[idx],\n                g: image.bitmap.data[idx + 1],\n                b: image.bitmap.data[idx + 2],\n            };\n            const colorModifier = (i, amount) => (0, utils_1.limit255)(clr[i] + amount);\n            actions.forEach((action) => {\n                if (action.apply === \"mix\") {\n                    clr = mix(clr, action.params[0], action.params[1]);\n                }\n                else if (action.apply === \"tint\") {\n                    clr = mix(clr, { r: 255, g: 255, b: 255 }, action.params?.[0]);\n                }\n                else if (action.apply === \"shade\") {\n                    clr = mix(clr, { r: 0, g: 0, b: 0 }, action.params?.[0]);\n                }\n                else if (action.apply === \"xor\") {\n                    clr = {\n                        r: clr.r ^ action.params[0].r,\n                        g: clr.g ^ action.params[0].g,\n                        b: clr.b ^ action.params[0].b,\n                    };\n                }\n                else if (action.apply === \"red\") {\n                    clr.r = colorModifier(\"r\", action.params[0]);\n                }\n                else if (action.apply === \"green\") {\n                    clr.g = colorModifier(\"g\", action.params[0]);\n                }\n                else if (action.apply === \"blue\") {\n                    clr.b = colorModifier(\"b\", action.params[0]);\n                }\n                else {\n                    if (action.apply === \"hue\") {\n                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                        // @ts-ignore\n                        action.apply = \"spin\";\n                    }\n                    const tnyClr = (0, tinycolor2_1.default)(clr);\n                    const fn = tnyClr[action.apply].bind(tnyClr);\n                    if (!fn) {\n                        throw new Error(\"action \" + action.apply + \" not supported\");\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    clr = fn(...(action.params || [])).toRgb();\n                }\n            });\n            image.bitmap.data[idx] = clr.r;\n            image.bitmap.data[idx + 1] = clr.g;\n            image.bitmap.data[idx + 2] = clr.b;\n        });\n        return image;\n    },\n};\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@jimp+plugin-color@1.6.0/node_modules/@jimp/plugin-color/dist/commonjs/index.js\n");

/***/ })

};
;