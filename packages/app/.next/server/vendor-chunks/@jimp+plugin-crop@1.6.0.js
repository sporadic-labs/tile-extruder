"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@jimp+plugin-crop@1.6.0";
exports.ids = ["vendor-chunks/@jimp+plugin-crop@1.6.0"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@jimp+plugin-crop@1.6.0/node_modules/@jimp/plugin-crop/dist/commonjs/index.js":
/*!**************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@jimp+plugin-crop@1.6.0/node_modules/@jimp/plugin-crop/dist/commonjs/index.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.methods = exports.CropOptionsSchema = void 0;\nconst utils_1 = __webpack_require__(/*! @jimp/utils */ \"(ssr)/../../node_modules/.pnpm/@jimp+utils@1.6.0/node_modules/@jimp/utils/dist/commonjs/index.js\");\nconst zod_1 = __webpack_require__(/*! zod */ \"(ssr)/../../node_modules/.pnpm/zod@3.24.1/node_modules/zod/lib/index.js\");\nexports.CropOptionsSchema = zod_1.z.object({\n    /** the x position to crop form */\n    x: zod_1.z.number(),\n    /** the y position to crop form */\n    y: zod_1.z.number(),\n    /** the width to crop form */\n    w: zod_1.z.number(),\n    /** the height to crop form */\n    h: zod_1.z.number(),\n});\nconst AutocropComplexOptionsSchema = zod_1.z.object({\n    /** percent of color difference tolerance (default value) */\n    tolerance: zod_1.z.number().min(0).max(1).optional(),\n    /** flag to force cropping only if the image has a real \"frame\" i.e. all 4 sides have some border (default value) */\n    cropOnlyFrames: zod_1.z.boolean().optional(),\n    /** force cropping top be symmetric */\n    cropSymmetric: zod_1.z.boolean().optional(),\n    /** Amount of pixels in border to leave */\n    leaveBorder: zod_1.z.number().optional(),\n    ignoreSides: zod_1.z\n        .object({\n        north: zod_1.z.boolean().optional(),\n        south: zod_1.z.boolean().optional(),\n        east: zod_1.z.boolean().optional(),\n        west: zod_1.z.boolean().optional(),\n    })\n        .optional(),\n});\nexports.methods = {\n    /**\n     * Crops the image at a given point to a give size.\n     *\n     * @example\n     * ```ts\n     * import { Jimp } from \"jimp\";\n     *\n     * const image = await Jimp.read(\"test/image.png\");\n     * const cropped = image.crop(150, 100);\n     * ```\n     */\n    crop(image, options) {\n        let { x, y, w, h } = exports.CropOptionsSchema.parse(options);\n        // round input\n        x = Math.round(x);\n        y = Math.round(y);\n        w = Math.round(w);\n        h = Math.round(h);\n        if (x === 0 && w === image.bitmap.width) {\n            // shortcut\n            const start = (w * y + x) << 2;\n            const end = start + ((h * w) << 2);\n            image.bitmap.data = image.bitmap.data.slice(start, end);\n        }\n        else {\n            const bitmap = Buffer.allocUnsafe(w * h * 4);\n            let offset = 0;\n            (0, utils_1.scan)(image, x, y, w, h, function (_, __, idx) {\n                const data = image.bitmap.data.readUInt32BE(idx);\n                bitmap.writeUInt32BE(data, offset);\n                offset += 4;\n            });\n            image.bitmap.data = bitmap;\n        }\n        image.bitmap.width = w;\n        image.bitmap.height = h;\n        return image;\n    },\n    /**\n     * Autocrop same color borders from this image.\n     * This function will attempt to crop out transparent pixels from the image.\n     *\n     * @example\n     * ```ts\n     * import { Jimp } from \"jimp\";\n     *\n     * const image = await Jimp.read(\"test/image.png\");\n     * const cropped = image.autocrop();\n     * ```\n     */\n    autocrop(image, options = {}) {\n        const { tolerance = 0.0002, cropOnlyFrames = true, cropSymmetric = false, leaveBorder = 0, ignoreSides: ignoreSidesArg, } = typeof options === \"number\"\n            ? { tolerance: options }\n            : AutocropComplexOptionsSchema.parse(options);\n        const w = image.bitmap.width;\n        const h = image.bitmap.height;\n        const minPixelsPerSide = 1; // to avoid cropping completely the image, resulting in an invalid 0 sized image\n        // i.e. north and south / east and west are cropped by the same value\n        const ignoreSides = {\n            north: false,\n            south: false,\n            east: false,\n            west: false,\n            ...ignoreSidesArg,\n        };\n        /**\n         * All borders must be of the same color as the top left pixel, to be cropped.\n         * It should be possible to crop borders each with a different color,\n         * but since there are many ways for corners to intersect, it would\n         * introduce unnecessary complexity to the algorithm.\n         */\n        // scan each side for same color borders\n        let colorTarget = image.getPixelColor(0, 0); // top left pixel color is the target color\n        const rgba1 = (0, utils_1.intToRGBA)(colorTarget);\n        // for north and east sides\n        let northPixelsToCrop = 0;\n        let eastPixelsToCrop = 0;\n        let southPixelsToCrop = 0;\n        let westPixelsToCrop = 0;\n        // north side (scan rows from north to south)\n        colorTarget = image.getPixelColor(0, 0);\n        if (!ignoreSides.north) {\n            north: for (let y = 0; y < h - minPixelsPerSide; y++) {\n                for (let x = 0; x < w; x++) {\n                    const colorXY = image.getPixelColor(x, y);\n                    const rgba2 = (0, utils_1.intToRGBA)(colorXY);\n                    if ((0, utils_1.colorDiff)(rgba1, rgba2) > tolerance) {\n                        // this pixel is too distant from the first one: abort this side scan\n                        break north;\n                    }\n                }\n                // this row contains all pixels with the same color: increment this side pixels to crop\n                northPixelsToCrop++;\n            }\n        }\n        // west side (scan columns from west to east)\n        colorTarget = image.getPixelColor(w, 0);\n        if (!ignoreSides.west) {\n            west: for (let x = 0; x < w - minPixelsPerSide; x++) {\n                for (let y = 0 + northPixelsToCrop; y < h; y++) {\n                    const colorXY = image.getPixelColor(x, y);\n                    const rgba2 = (0, utils_1.intToRGBA)(colorXY);\n                    if ((0, utils_1.colorDiff)(rgba1, rgba2) > tolerance) {\n                        // this pixel is too distant from the first one: abort this side scan\n                        break west;\n                    }\n                }\n                // this column contains all pixels with the same color: increment this side pixels to crop\n                westPixelsToCrop++;\n            }\n        }\n        // south side (scan rows from south to north)\n        colorTarget = image.getPixelColor(0, h);\n        if (!ignoreSides.south) {\n            south: for (let y = h - 1; y >= northPixelsToCrop + minPixelsPerSide; y--) {\n                for (let x = w - eastPixelsToCrop - 1; x >= 0; x--) {\n                    const colorXY = image.getPixelColor(x, y);\n                    const rgba2 = (0, utils_1.intToRGBA)(colorXY);\n                    if ((0, utils_1.colorDiff)(rgba1, rgba2) > tolerance) {\n                        // this pixel is too distant from the first one: abort this side scan\n                        break south;\n                    }\n                }\n                // this row contains all pixels with the same color: increment this side pixels to crop\n                southPixelsToCrop++;\n            }\n        }\n        // east side (scan columns from east to west)\n        colorTarget = image.getPixelColor(w, h);\n        if (!ignoreSides.east) {\n            east: for (let x = w - 1; x >= 0 + westPixelsToCrop + minPixelsPerSide; x--) {\n                for (let y = h - 1; y >= 0 + northPixelsToCrop; y--) {\n                    const colorXY = image.getPixelColor(x, y);\n                    const rgba2 = (0, utils_1.intToRGBA)(colorXY);\n                    if ((0, utils_1.colorDiff)(rgba1, rgba2) > tolerance) {\n                        // this pixel is too distant from the first one: abort this side scan\n                        break east;\n                    }\n                }\n                // this column contains all pixels with the same color: increment this side pixels to crop\n                eastPixelsToCrop++;\n            }\n        }\n        // decide if a crop is needed\n        let doCrop = false;\n        // apply leaveBorder\n        westPixelsToCrop -= leaveBorder;\n        eastPixelsToCrop -= leaveBorder;\n        northPixelsToCrop -= leaveBorder;\n        southPixelsToCrop -= leaveBorder;\n        if (cropSymmetric) {\n            const horizontal = Math.min(eastPixelsToCrop, westPixelsToCrop);\n            const vertical = Math.min(northPixelsToCrop, southPixelsToCrop);\n            westPixelsToCrop = horizontal;\n            eastPixelsToCrop = horizontal;\n            northPixelsToCrop = vertical;\n            southPixelsToCrop = vertical;\n        }\n        // make sure that crops are >= 0\n        westPixelsToCrop = westPixelsToCrop >= 0 ? westPixelsToCrop : 0;\n        eastPixelsToCrop = eastPixelsToCrop >= 0 ? eastPixelsToCrop : 0;\n        northPixelsToCrop = northPixelsToCrop >= 0 ? northPixelsToCrop : 0;\n        southPixelsToCrop = southPixelsToCrop >= 0 ? southPixelsToCrop : 0;\n        // safety checks\n        const widthOfRemainingPixels = w - (westPixelsToCrop + eastPixelsToCrop);\n        const heightOfRemainingPixels = h - (southPixelsToCrop + northPixelsToCrop);\n        if (cropOnlyFrames) {\n            // crop image if all sides should be cropped\n            doCrop =\n                eastPixelsToCrop !== 0 &&\n                    northPixelsToCrop !== 0 &&\n                    westPixelsToCrop !== 0 &&\n                    southPixelsToCrop !== 0;\n        }\n        else {\n            // crop image if at least one side should be cropped\n            doCrop =\n                eastPixelsToCrop !== 0 ||\n                    northPixelsToCrop !== 0 ||\n                    westPixelsToCrop !== 0 ||\n                    southPixelsToCrop !== 0;\n        }\n        if (doCrop) {\n            // do the real crop\n            this.crop(image, {\n                x: westPixelsToCrop,\n                y: northPixelsToCrop,\n                w: widthOfRemainingPixels,\n                h: heightOfRemainingPixels,\n            });\n        }\n        return image;\n    },\n};\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@jimp+plugin-crop@1.6.0/node_modules/@jimp/plugin-crop/dist/commonjs/index.js\n");

/***/ })

};
;