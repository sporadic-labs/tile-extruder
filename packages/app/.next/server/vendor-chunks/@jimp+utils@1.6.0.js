"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@jimp+utils@1.6.0";
exports.ids = ["vendor-chunks/@jimp+utils@1.6.0"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@jimp+utils@1.6.0/node_modules/@jimp/utils/dist/commonjs/index.js":
/*!**************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@jimp+utils@1.6.0/node_modules/@jimp/utils/dist/commonjs/index.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.clone = clone;\nexports.scan = scan;\nexports.scanIterator = scanIterator;\nexports.intToRGBA = intToRGBA;\nexports.rgbaToInt = rgbaToInt;\nexports.colorDiff = colorDiff;\nexports.limit255 = limit255;\nexports.cssColorToHex = cssColorToHex;\nconst tinycolor2_1 = __importDefault(__webpack_require__(/*! tinycolor2 */ \"(ssr)/../../node_modules/.pnpm/tinycolor2@1.6.0/node_modules/tinycolor2/cjs/tinycolor.js\"));\nfunction clone(image) {\n    const newBitmap = {\n        width: image.bitmap.width,\n        height: image.bitmap.height,\n        data: Buffer.from(image.bitmap.data),\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new image.constructor(newBitmap);\n}\nfunction scan(image, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nxArg, yArg, wArg, hArg, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ncbArg) {\n    let x;\n    let y;\n    let w;\n    let h;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let cb;\n    if (typeof xArg === \"function\") {\n        cb = xArg;\n        x = 0;\n        y = 0;\n        w = image.bitmap.width;\n        h = image.bitmap.height;\n    }\n    else {\n        x = xArg;\n        if (typeof yArg !== \"number\")\n            throw new Error(\"y must be a number\");\n        y = yArg;\n        if (typeof wArg !== \"number\")\n            throw new Error(\"w must be a number\");\n        w = wArg;\n        if (typeof hArg !== \"number\")\n            throw new Error(\"h must be a number\");\n        h = hArg;\n        if (typeof cbArg !== \"function\")\n            throw new Error(\"cb must be a function\");\n        cb = cbArg;\n    }\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n    w = Math.round(w);\n    h = Math.round(h);\n    const bound = cb.bind(image);\n    for (let _y = y; _y < y + h; _y++) {\n        for (let _x = x; _x < x + w; _x++) {\n            const idx = (image.bitmap.width * _y + _x) << 2;\n            // Bind the images so this.bitmap works\n            bound(_x, _y, idx);\n        }\n    }\n    return image;\n}\nfunction* scanIterator(image, x, y, w, h) {\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n    w = Math.round(w);\n    h = Math.round(h);\n    for (let _y = y; _y < y + h; _y++) {\n        for (let _x = x; _x < x + w; _x++) {\n            const idx = (image.bitmap.width * _y + _x) << 2;\n            yield { x: _x, y: _y, idx, image };\n        }\n    }\n}\n/**\n * A helper method that converts RGBA values to a single integer value\n * @param i A single integer value representing an RGBA colour (e.g. 0xFF0000FF for red)\n * @returns An object with the properties r, g, b and a representing RGBA values\n * @example\n * ```ts\n * import { intToRGBA } from \"@jimp/utils\";\n *\n * intToRGBA(0xFF0000FF); // { r: 255, g: 0, b: 0, a:255 }\n * ```\n */\nfunction intToRGBA(i) {\n    if (typeof i !== \"number\") {\n        throw new Error(\"i must be a number\");\n    }\n    const rgba = {\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 0,\n    };\n    rgba.r = Math.floor(i / Math.pow(256, 3));\n    rgba.g = Math.floor((i - rgba.r * Math.pow(256, 3)) / Math.pow(256, 2));\n    rgba.b = Math.floor((i - rgba.r * Math.pow(256, 3) - rgba.g * Math.pow(256, 2)) /\n        Math.pow(256, 1));\n    rgba.a = Math.floor((i -\n        rgba.r * Math.pow(256, 3) -\n        rgba.g * Math.pow(256, 2) -\n        rgba.b * Math.pow(256, 1)) /\n        Math.pow(256, 0));\n    return rgba;\n}\n/**\n * A static helper method that converts RGBA values to a single integer value\n * @param r the red value (0-255)\n * @param g the green value (0-255)\n * @param b the blue value (0-255)\n * @param a the alpha value (0-255)\n * @example\n * ```ts\n * import { rgbaToInt } from \"@jimp/utils\";\n *\n * rgbaToInt(255, 0, 0, 255); // 0xFF0000FF\n * ```\n */\nfunction rgbaToInt(r, g, b, a) {\n    if (typeof r !== \"number\" ||\n        typeof g !== \"number\" ||\n        typeof b !== \"number\" ||\n        typeof a !== \"number\") {\n        throw new Error(\"r, g, b and a must be numbers\");\n    }\n    if (r < 0 || r > 255) {\n        throw new Error(\"r must be between 0 and 255\");\n    }\n    if (g < 0 || g > 255) {\n        throw new Error(\"g must be between 0 and 255\");\n    }\n    if (b < 0 || b > 255) {\n        throw new Error(\"b must be between 0 and 255\");\n    }\n    if (a < 0 || a > 255) {\n        throw new Error(\"a must be between 0 and 255\");\n    }\n    let i = r & 0xff;\n    i <<= 8;\n    i |= g & 0xff;\n    i <<= 8;\n    i |= b & 0xff;\n    i <<= 8;\n    i |= a & 0xff;\n    // Ensure sign is correct\n    i >>>= 0;\n    return i;\n}\n/**\n * Compute color difference\n * 0 means no difference, 1 means maximum difference.\n * Both parameters must be an color object `{ r:val, g:val, b:val, a:val }`\n * Where `a` is optional and `val` is an integer between 0 and 255.\n * @param rgba1 first color to compare.\n * @param rgba2 second color to compare.\n * @returns float between 0 and 1.\n * @example\n * ```ts\n * import { colorDiff } from \"@jimp/utils\";\n *\n * colorDiff(\n *  { r: 255, g: 0, b: 0, a: 0 },\n *  { r: 0, g: 255, b: 0, a: 0 },\n * ); // 0.5\n *\n * colorDiff(\n *  { r: 0, g: 0, b: 0, },\n *  { r: 255, g: 255, b: 255, }\n * ); // 0.7\n * ```\n */\nfunction colorDiff(rgba1, rgba2) {\n    const sq = (n) => Math.pow(n, 2);\n    const { max } = Math;\n    const maxVal = 255 * 255 * 3;\n    const rgba1A = \"a\" in rgba1 ? rgba1.a : 255;\n    const rgba2A = \"a\" in rgba2 ? rgba2.a : 255;\n    return ((max(sq(rgba1.r - rgba2.r), sq(rgba1.r - rgba2.r - rgba1A + rgba2A)) +\n        max(sq(rgba1.g - rgba2.g), sq(rgba1.g - rgba2.g - rgba1A + rgba2A)) +\n        max(sq(rgba1.b - rgba2.b), sq(rgba1.b - rgba2.b - rgba1A + rgba2A))) /\n        maxVal);\n}\n/**\n * Limits a number to between 0 or 255\n * @example\n * ```ts\n * import { limit255 } from \"@jimp/utils\";\n *\n * limit255(256); // 255\n * limit255(-1); // 0\n * ```\n */\nfunction limit255(n) {\n    n = Math.max(n, 0);\n    n = Math.min(n, 255);\n    return n;\n}\n/**\n * Converts a css color (Hex, 8-digit (RGBA) Hex, RGB, RGBA, HSL, HSLA, HSV, HSVA, Named) to a hex number\n * @returns A hex number representing a color\n * @example\n * ```ts\n * import { cssColorToHex } from \"@jimp/utils\";\n *\n * cssColorToHex(\"rgba(255, 0, 0, 0.5)\"); // \"ff000080\"\n * ```\n */\nfunction cssColorToHex(cssColor) {\n    if (typeof cssColor === \"number\") {\n        return cssColor;\n    }\n    return parseInt((0, tinycolor2_1.default)(cssColor).toHex8(), 16);\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@jimp+utils@1.6.0/node_modules/@jimp/utils/dist/commonjs/index.js\n");

/***/ })

};
;